// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/EncounterSettings.proto

package POGOProtos.Settings.Master;

/**
 * Protobuf type {@code POGOProtos.Settings.Master.EncounterSettings}
 */
public  final class EncounterSettings extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:POGOProtos.Settings.Master.EncounterSettings)
    EncounterSettingsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use EncounterSettings.newBuilder() to construct.
  private EncounterSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private EncounterSettings() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new EncounterSettings();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private EncounterSettings(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 13: {

            spinBonusThreshold_ = input.readFloat();
            break;
          }
          case 21: {

            excellentThrowThreshold_ = input.readFloat();
            break;
          }
          case 29: {

            greatThrowThreshold_ = input.readFloat();
            break;
          }
          case 37: {

            niceThrowThreshold_ = input.readFloat();
            break;
          }
          case 40: {

            milestoneThreshold_ = input.readInt32();
            break;
          }
          case 48: {

            arPlusModeEnabled_ = input.readBool();
            break;
          }
          case 61: {

            arCloseProximityThreshold_ = input.readFloat();
            break;
          }
          case 69: {

            arLowAwarenessThreshold_ = input.readFloat();
            break;
          }
          case 77: {

            arCloseProximityMultiplier_ = input.readFloat();
            break;
          }
          case 85: {

            arAwarenessPenaltyThreshold_ = input.readFloat();
            break;
          }
          case 93: {

            arLowAwarenessMaxMultiplier_ = input.readFloat();
            break;
          }
          case 101: {

            arHighAwarenessMinPenaltyMultiplier_ = input.readFloat();
            break;
          }
          case 104: {

            arPlusAttemptsUntilFleeMax_ = input.readInt32();
            break;
          }
          case 112: {

            arPlusAttemptsUntilFleeInfinite_ = input.readInt32();
            break;
          }
          case 125: {

            escapedBonusMultiplierMax_ = input.readFloat();
            break;
          }
          case 133: {

            escapedBonusMultiplierByExcellentThrow_ = input.readFloat();
            break;
          }
          case 141: {

            escapedBonusMultiplierByGreatThrow_ = input.readFloat();
            break;
          }
          case 149: {

            escapedBonusMultiplierByNiceThrow_ = input.readFloat();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return POGOProtos.Settings.Master.EncounterSettingsOuterClass.internal_static_POGOProtos_Settings_Master_EncounterSettings_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return POGOProtos.Settings.Master.EncounterSettingsOuterClass.internal_static_POGOProtos_Settings_Master_EncounterSettings_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            POGOProtos.Settings.Master.EncounterSettings.class, POGOProtos.Settings.Master.EncounterSettings.Builder.class);
  }

  public static final int SPIN_BONUS_THRESHOLD_FIELD_NUMBER = 1;
  private float spinBonusThreshold_;
  /**
   * <code>float spin_bonus_threshold = 1;</code>
   * @return The spinBonusThreshold.
   */
  public float getSpinBonusThreshold() {
    return spinBonusThreshold_;
  }

  public static final int EXCELLENT_THROW_THRESHOLD_FIELD_NUMBER = 2;
  private float excellentThrowThreshold_;
  /**
   * <code>float excellent_throw_threshold = 2;</code>
   * @return The excellentThrowThreshold.
   */
  public float getExcellentThrowThreshold() {
    return excellentThrowThreshold_;
  }

  public static final int GREAT_THROW_THRESHOLD_FIELD_NUMBER = 3;
  private float greatThrowThreshold_;
  /**
   * <code>float great_throw_threshold = 3;</code>
   * @return The greatThrowThreshold.
   */
  public float getGreatThrowThreshold() {
    return greatThrowThreshold_;
  }

  public static final int NICE_THROW_THRESHOLD_FIELD_NUMBER = 4;
  private float niceThrowThreshold_;
  /**
   * <code>float nice_throw_threshold = 4;</code>
   * @return The niceThrowThreshold.
   */
  public float getNiceThrowThreshold() {
    return niceThrowThreshold_;
  }

  public static final int MILESTONE_THRESHOLD_FIELD_NUMBER = 5;
  private int milestoneThreshold_;
  /**
   * <code>int32 milestone_threshold = 5;</code>
   * @return The milestoneThreshold.
   */
  public int getMilestoneThreshold() {
    return milestoneThreshold_;
  }

  public static final int AR_PLUS_MODE_ENABLED_FIELD_NUMBER = 6;
  private boolean arPlusModeEnabled_;
  /**
   * <code>bool ar_plus_mode_enabled = 6;</code>
   * @return The arPlusModeEnabled.
   */
  public boolean getArPlusModeEnabled() {
    return arPlusModeEnabled_;
  }

  public static final int AR_CLOSE_PROXIMITY_THRESHOLD_FIELD_NUMBER = 7;
  private float arCloseProximityThreshold_;
  /**
   * <code>float ar_close_proximity_threshold = 7;</code>
   * @return The arCloseProximityThreshold.
   */
  public float getArCloseProximityThreshold() {
    return arCloseProximityThreshold_;
  }

  public static final int AR_LOW_AWARENESS_THRESHOLD_FIELD_NUMBER = 8;
  private float arLowAwarenessThreshold_;
  /**
   * <code>float ar_low_awareness_threshold = 8;</code>
   * @return The arLowAwarenessThreshold.
   */
  public float getArLowAwarenessThreshold() {
    return arLowAwarenessThreshold_;
  }

  public static final int AR_CLOSE_PROXIMITY_MULTIPLIER_FIELD_NUMBER = 9;
  private float arCloseProximityMultiplier_;
  /**
   * <code>float ar_close_proximity_multiplier = 9;</code>
   * @return The arCloseProximityMultiplier.
   */
  public float getArCloseProximityMultiplier() {
    return arCloseProximityMultiplier_;
  }

  public static final int AR_AWARENESS_PENALTY_THRESHOLD_FIELD_NUMBER = 10;
  private float arAwarenessPenaltyThreshold_;
  /**
   * <code>float ar_awareness_penalty_threshold = 10;</code>
   * @return The arAwarenessPenaltyThreshold.
   */
  public float getArAwarenessPenaltyThreshold() {
    return arAwarenessPenaltyThreshold_;
  }

  public static final int AR_LOW_AWARENESS_MAX_MULTIPLIER_FIELD_NUMBER = 11;
  private float arLowAwarenessMaxMultiplier_;
  /**
   * <code>float ar_low_awareness_max_multiplier = 11;</code>
   * @return The arLowAwarenessMaxMultiplier.
   */
  public float getArLowAwarenessMaxMultiplier() {
    return arLowAwarenessMaxMultiplier_;
  }

  public static final int AR_HIGH_AWARENESS_MIN_PENALTY_MULTIPLIER_FIELD_NUMBER = 12;
  private float arHighAwarenessMinPenaltyMultiplier_;
  /**
   * <code>float ar_high_awareness_min_penalty_multiplier = 12;</code>
   * @return The arHighAwarenessMinPenaltyMultiplier.
   */
  public float getArHighAwarenessMinPenaltyMultiplier() {
    return arHighAwarenessMinPenaltyMultiplier_;
  }

  public static final int AR_PLUS_ATTEMPTS_UNTIL_FLEE_MAX_FIELD_NUMBER = 13;
  private int arPlusAttemptsUntilFleeMax_;
  /**
   * <code>int32 ar_plus_attempts_until_flee_max = 13;</code>
   * @return The arPlusAttemptsUntilFleeMax.
   */
  public int getArPlusAttemptsUntilFleeMax() {
    return arPlusAttemptsUntilFleeMax_;
  }

  public static final int AR_PLUS_ATTEMPTS_UNTIL_FLEE_INFINITE_FIELD_NUMBER = 14;
  private int arPlusAttemptsUntilFleeInfinite_;
  /**
   * <code>int32 ar_plus_attempts_until_flee_infinite = 14;</code>
   * @return The arPlusAttemptsUntilFleeInfinite.
   */
  public int getArPlusAttemptsUntilFleeInfinite() {
    return arPlusAttemptsUntilFleeInfinite_;
  }

  public static final int ESCAPED_BONUS_MULTIPLIER_MAX_FIELD_NUMBER = 15;
  private float escapedBonusMultiplierMax_;
  /**
   * <code>float escaped_bonus_multiplier_max = 15;</code>
   * @return The escapedBonusMultiplierMax.
   */
  public float getEscapedBonusMultiplierMax() {
    return escapedBonusMultiplierMax_;
  }

  public static final int ESCAPED_BONUS_MULTIPLIER_BY_EXCELLENT_THROW_FIELD_NUMBER = 16;
  private float escapedBonusMultiplierByExcellentThrow_;
  /**
   * <code>float escaped_bonus_multiplier_by_excellent_throw = 16;</code>
   * @return The escapedBonusMultiplierByExcellentThrow.
   */
  public float getEscapedBonusMultiplierByExcellentThrow() {
    return escapedBonusMultiplierByExcellentThrow_;
  }

  public static final int ESCAPED_BONUS_MULTIPLIER_BY_GREAT_THROW_FIELD_NUMBER = 17;
  private float escapedBonusMultiplierByGreatThrow_;
  /**
   * <code>float escaped_bonus_multiplier_by_great_throw = 17;</code>
   * @return The escapedBonusMultiplierByGreatThrow.
   */
  public float getEscapedBonusMultiplierByGreatThrow() {
    return escapedBonusMultiplierByGreatThrow_;
  }

  public static final int ESCAPED_BONUS_MULTIPLIER_BY_NICE_THROW_FIELD_NUMBER = 18;
  private float escapedBonusMultiplierByNiceThrow_;
  /**
   * <code>float escaped_bonus_multiplier_by_nice_throw = 18;</code>
   * @return The escapedBonusMultiplierByNiceThrow.
   */
  public float getEscapedBonusMultiplierByNiceThrow() {
    return escapedBonusMultiplierByNiceThrow_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (spinBonusThreshold_ != 0F) {
      output.writeFloat(1, spinBonusThreshold_);
    }
    if (excellentThrowThreshold_ != 0F) {
      output.writeFloat(2, excellentThrowThreshold_);
    }
    if (greatThrowThreshold_ != 0F) {
      output.writeFloat(3, greatThrowThreshold_);
    }
    if (niceThrowThreshold_ != 0F) {
      output.writeFloat(4, niceThrowThreshold_);
    }
    if (milestoneThreshold_ != 0) {
      output.writeInt32(5, milestoneThreshold_);
    }
    if (arPlusModeEnabled_ != false) {
      output.writeBool(6, arPlusModeEnabled_);
    }
    if (arCloseProximityThreshold_ != 0F) {
      output.writeFloat(7, arCloseProximityThreshold_);
    }
    if (arLowAwarenessThreshold_ != 0F) {
      output.writeFloat(8, arLowAwarenessThreshold_);
    }
    if (arCloseProximityMultiplier_ != 0F) {
      output.writeFloat(9, arCloseProximityMultiplier_);
    }
    if (arAwarenessPenaltyThreshold_ != 0F) {
      output.writeFloat(10, arAwarenessPenaltyThreshold_);
    }
    if (arLowAwarenessMaxMultiplier_ != 0F) {
      output.writeFloat(11, arLowAwarenessMaxMultiplier_);
    }
    if (arHighAwarenessMinPenaltyMultiplier_ != 0F) {
      output.writeFloat(12, arHighAwarenessMinPenaltyMultiplier_);
    }
    if (arPlusAttemptsUntilFleeMax_ != 0) {
      output.writeInt32(13, arPlusAttemptsUntilFleeMax_);
    }
    if (arPlusAttemptsUntilFleeInfinite_ != 0) {
      output.writeInt32(14, arPlusAttemptsUntilFleeInfinite_);
    }
    if (escapedBonusMultiplierMax_ != 0F) {
      output.writeFloat(15, escapedBonusMultiplierMax_);
    }
    if (escapedBonusMultiplierByExcellentThrow_ != 0F) {
      output.writeFloat(16, escapedBonusMultiplierByExcellentThrow_);
    }
    if (escapedBonusMultiplierByGreatThrow_ != 0F) {
      output.writeFloat(17, escapedBonusMultiplierByGreatThrow_);
    }
    if (escapedBonusMultiplierByNiceThrow_ != 0F) {
      output.writeFloat(18, escapedBonusMultiplierByNiceThrow_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (spinBonusThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(1, spinBonusThreshold_);
    }
    if (excellentThrowThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, excellentThrowThreshold_);
    }
    if (greatThrowThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, greatThrowThreshold_);
    }
    if (niceThrowThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, niceThrowThreshold_);
    }
    if (milestoneThreshold_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, milestoneThreshold_);
    }
    if (arPlusModeEnabled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, arPlusModeEnabled_);
    }
    if (arCloseProximityThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, arCloseProximityThreshold_);
    }
    if (arLowAwarenessThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, arLowAwarenessThreshold_);
    }
    if (arCloseProximityMultiplier_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, arCloseProximityMultiplier_);
    }
    if (arAwarenessPenaltyThreshold_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(10, arAwarenessPenaltyThreshold_);
    }
    if (arLowAwarenessMaxMultiplier_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(11, arLowAwarenessMaxMultiplier_);
    }
    if (arHighAwarenessMinPenaltyMultiplier_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, arHighAwarenessMinPenaltyMultiplier_);
    }
    if (arPlusAttemptsUntilFleeMax_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, arPlusAttemptsUntilFleeMax_);
    }
    if (arPlusAttemptsUntilFleeInfinite_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(14, arPlusAttemptsUntilFleeInfinite_);
    }
    if (escapedBonusMultiplierMax_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(15, escapedBonusMultiplierMax_);
    }
    if (escapedBonusMultiplierByExcellentThrow_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(16, escapedBonusMultiplierByExcellentThrow_);
    }
    if (escapedBonusMultiplierByGreatThrow_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(17, escapedBonusMultiplierByGreatThrow_);
    }
    if (escapedBonusMultiplierByNiceThrow_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(18, escapedBonusMultiplierByNiceThrow_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof POGOProtos.Settings.Master.EncounterSettings)) {
      return super.equals(obj);
    }
    POGOProtos.Settings.Master.EncounterSettings other = (POGOProtos.Settings.Master.EncounterSettings) obj;

    if (java.lang.Float.floatToIntBits(getSpinBonusThreshold())
        != java.lang.Float.floatToIntBits(
            other.getSpinBonusThreshold())) return false;
    if (java.lang.Float.floatToIntBits(getExcellentThrowThreshold())
        != java.lang.Float.floatToIntBits(
            other.getExcellentThrowThreshold())) return false;
    if (java.lang.Float.floatToIntBits(getGreatThrowThreshold())
        != java.lang.Float.floatToIntBits(
            other.getGreatThrowThreshold())) return false;
    if (java.lang.Float.floatToIntBits(getNiceThrowThreshold())
        != java.lang.Float.floatToIntBits(
            other.getNiceThrowThreshold())) return false;
    if (getMilestoneThreshold()
        != other.getMilestoneThreshold()) return false;
    if (getArPlusModeEnabled()
        != other.getArPlusModeEnabled()) return false;
    if (java.lang.Float.floatToIntBits(getArCloseProximityThreshold())
        != java.lang.Float.floatToIntBits(
            other.getArCloseProximityThreshold())) return false;
    if (java.lang.Float.floatToIntBits(getArLowAwarenessThreshold())
        != java.lang.Float.floatToIntBits(
            other.getArLowAwarenessThreshold())) return false;
    if (java.lang.Float.floatToIntBits(getArCloseProximityMultiplier())
        != java.lang.Float.floatToIntBits(
            other.getArCloseProximityMultiplier())) return false;
    if (java.lang.Float.floatToIntBits(getArAwarenessPenaltyThreshold())
        != java.lang.Float.floatToIntBits(
            other.getArAwarenessPenaltyThreshold())) return false;
    if (java.lang.Float.floatToIntBits(getArLowAwarenessMaxMultiplier())
        != java.lang.Float.floatToIntBits(
            other.getArLowAwarenessMaxMultiplier())) return false;
    if (java.lang.Float.floatToIntBits(getArHighAwarenessMinPenaltyMultiplier())
        != java.lang.Float.floatToIntBits(
            other.getArHighAwarenessMinPenaltyMultiplier())) return false;
    if (getArPlusAttemptsUntilFleeMax()
        != other.getArPlusAttemptsUntilFleeMax()) return false;
    if (getArPlusAttemptsUntilFleeInfinite()
        != other.getArPlusAttemptsUntilFleeInfinite()) return false;
    if (java.lang.Float.floatToIntBits(getEscapedBonusMultiplierMax())
        != java.lang.Float.floatToIntBits(
            other.getEscapedBonusMultiplierMax())) return false;
    if (java.lang.Float.floatToIntBits(getEscapedBonusMultiplierByExcellentThrow())
        != java.lang.Float.floatToIntBits(
            other.getEscapedBonusMultiplierByExcellentThrow())) return false;
    if (java.lang.Float.floatToIntBits(getEscapedBonusMultiplierByGreatThrow())
        != java.lang.Float.floatToIntBits(
            other.getEscapedBonusMultiplierByGreatThrow())) return false;
    if (java.lang.Float.floatToIntBits(getEscapedBonusMultiplierByNiceThrow())
        != java.lang.Float.floatToIntBits(
            other.getEscapedBonusMultiplierByNiceThrow())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SPIN_BONUS_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getSpinBonusThreshold());
    hash = (37 * hash) + EXCELLENT_THROW_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getExcellentThrowThreshold());
    hash = (37 * hash) + GREAT_THROW_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getGreatThrowThreshold());
    hash = (37 * hash) + NICE_THROW_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getNiceThrowThreshold());
    hash = (37 * hash) + MILESTONE_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + getMilestoneThreshold();
    hash = (37 * hash) + AR_PLUS_MODE_ENABLED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getArPlusModeEnabled());
    hash = (37 * hash) + AR_CLOSE_PROXIMITY_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getArCloseProximityThreshold());
    hash = (37 * hash) + AR_LOW_AWARENESS_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getArLowAwarenessThreshold());
    hash = (37 * hash) + AR_CLOSE_PROXIMITY_MULTIPLIER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getArCloseProximityMultiplier());
    hash = (37 * hash) + AR_AWARENESS_PENALTY_THRESHOLD_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getArAwarenessPenaltyThreshold());
    hash = (37 * hash) + AR_LOW_AWARENESS_MAX_MULTIPLIER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getArLowAwarenessMaxMultiplier());
    hash = (37 * hash) + AR_HIGH_AWARENESS_MIN_PENALTY_MULTIPLIER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getArHighAwarenessMinPenaltyMultiplier());
    hash = (37 * hash) + AR_PLUS_ATTEMPTS_UNTIL_FLEE_MAX_FIELD_NUMBER;
    hash = (53 * hash) + getArPlusAttemptsUntilFleeMax();
    hash = (37 * hash) + AR_PLUS_ATTEMPTS_UNTIL_FLEE_INFINITE_FIELD_NUMBER;
    hash = (53 * hash) + getArPlusAttemptsUntilFleeInfinite();
    hash = (37 * hash) + ESCAPED_BONUS_MULTIPLIER_MAX_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getEscapedBonusMultiplierMax());
    hash = (37 * hash) + ESCAPED_BONUS_MULTIPLIER_BY_EXCELLENT_THROW_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getEscapedBonusMultiplierByExcellentThrow());
    hash = (37 * hash) + ESCAPED_BONUS_MULTIPLIER_BY_GREAT_THROW_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getEscapedBonusMultiplierByGreatThrow());
    hash = (37 * hash) + ESCAPED_BONUS_MULTIPLIER_BY_NICE_THROW_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getEscapedBonusMultiplierByNiceThrow());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static POGOProtos.Settings.Master.EncounterSettings parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(POGOProtos.Settings.Master.EncounterSettings prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code POGOProtos.Settings.Master.EncounterSettings}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:POGOProtos.Settings.Master.EncounterSettings)
      POGOProtos.Settings.Master.EncounterSettingsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return POGOProtos.Settings.Master.EncounterSettingsOuterClass.internal_static_POGOProtos_Settings_Master_EncounterSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return POGOProtos.Settings.Master.EncounterSettingsOuterClass.internal_static_POGOProtos_Settings_Master_EncounterSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              POGOProtos.Settings.Master.EncounterSettings.class, POGOProtos.Settings.Master.EncounterSettings.Builder.class);
    }

    // Construct using POGOProtos.Settings.Master.EncounterSettings.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      spinBonusThreshold_ = 0F;

      excellentThrowThreshold_ = 0F;

      greatThrowThreshold_ = 0F;

      niceThrowThreshold_ = 0F;

      milestoneThreshold_ = 0;

      arPlusModeEnabled_ = false;

      arCloseProximityThreshold_ = 0F;

      arLowAwarenessThreshold_ = 0F;

      arCloseProximityMultiplier_ = 0F;

      arAwarenessPenaltyThreshold_ = 0F;

      arLowAwarenessMaxMultiplier_ = 0F;

      arHighAwarenessMinPenaltyMultiplier_ = 0F;

      arPlusAttemptsUntilFleeMax_ = 0;

      arPlusAttemptsUntilFleeInfinite_ = 0;

      escapedBonusMultiplierMax_ = 0F;

      escapedBonusMultiplierByExcellentThrow_ = 0F;

      escapedBonusMultiplierByGreatThrow_ = 0F;

      escapedBonusMultiplierByNiceThrow_ = 0F;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return POGOProtos.Settings.Master.EncounterSettingsOuterClass.internal_static_POGOProtos_Settings_Master_EncounterSettings_descriptor;
    }

    @java.lang.Override
    public POGOProtos.Settings.Master.EncounterSettings getDefaultInstanceForType() {
      return POGOProtos.Settings.Master.EncounterSettings.getDefaultInstance();
    }

    @java.lang.Override
    public POGOProtos.Settings.Master.EncounterSettings build() {
      POGOProtos.Settings.Master.EncounterSettings result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public POGOProtos.Settings.Master.EncounterSettings buildPartial() {
      POGOProtos.Settings.Master.EncounterSettings result = new POGOProtos.Settings.Master.EncounterSettings(this);
      result.spinBonusThreshold_ = spinBonusThreshold_;
      result.excellentThrowThreshold_ = excellentThrowThreshold_;
      result.greatThrowThreshold_ = greatThrowThreshold_;
      result.niceThrowThreshold_ = niceThrowThreshold_;
      result.milestoneThreshold_ = milestoneThreshold_;
      result.arPlusModeEnabled_ = arPlusModeEnabled_;
      result.arCloseProximityThreshold_ = arCloseProximityThreshold_;
      result.arLowAwarenessThreshold_ = arLowAwarenessThreshold_;
      result.arCloseProximityMultiplier_ = arCloseProximityMultiplier_;
      result.arAwarenessPenaltyThreshold_ = arAwarenessPenaltyThreshold_;
      result.arLowAwarenessMaxMultiplier_ = arLowAwarenessMaxMultiplier_;
      result.arHighAwarenessMinPenaltyMultiplier_ = arHighAwarenessMinPenaltyMultiplier_;
      result.arPlusAttemptsUntilFleeMax_ = arPlusAttemptsUntilFleeMax_;
      result.arPlusAttemptsUntilFleeInfinite_ = arPlusAttemptsUntilFleeInfinite_;
      result.escapedBonusMultiplierMax_ = escapedBonusMultiplierMax_;
      result.escapedBonusMultiplierByExcellentThrow_ = escapedBonusMultiplierByExcellentThrow_;
      result.escapedBonusMultiplierByGreatThrow_ = escapedBonusMultiplierByGreatThrow_;
      result.escapedBonusMultiplierByNiceThrow_ = escapedBonusMultiplierByNiceThrow_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof POGOProtos.Settings.Master.EncounterSettings) {
        return mergeFrom((POGOProtos.Settings.Master.EncounterSettings)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(POGOProtos.Settings.Master.EncounterSettings other) {
      if (other == POGOProtos.Settings.Master.EncounterSettings.getDefaultInstance()) return this;
      if (other.getSpinBonusThreshold() != 0F) {
        setSpinBonusThreshold(other.getSpinBonusThreshold());
      }
      if (other.getExcellentThrowThreshold() != 0F) {
        setExcellentThrowThreshold(other.getExcellentThrowThreshold());
      }
      if (other.getGreatThrowThreshold() != 0F) {
        setGreatThrowThreshold(other.getGreatThrowThreshold());
      }
      if (other.getNiceThrowThreshold() != 0F) {
        setNiceThrowThreshold(other.getNiceThrowThreshold());
      }
      if (other.getMilestoneThreshold() != 0) {
        setMilestoneThreshold(other.getMilestoneThreshold());
      }
      if (other.getArPlusModeEnabled() != false) {
        setArPlusModeEnabled(other.getArPlusModeEnabled());
      }
      if (other.getArCloseProximityThreshold() != 0F) {
        setArCloseProximityThreshold(other.getArCloseProximityThreshold());
      }
      if (other.getArLowAwarenessThreshold() != 0F) {
        setArLowAwarenessThreshold(other.getArLowAwarenessThreshold());
      }
      if (other.getArCloseProximityMultiplier() != 0F) {
        setArCloseProximityMultiplier(other.getArCloseProximityMultiplier());
      }
      if (other.getArAwarenessPenaltyThreshold() != 0F) {
        setArAwarenessPenaltyThreshold(other.getArAwarenessPenaltyThreshold());
      }
      if (other.getArLowAwarenessMaxMultiplier() != 0F) {
        setArLowAwarenessMaxMultiplier(other.getArLowAwarenessMaxMultiplier());
      }
      if (other.getArHighAwarenessMinPenaltyMultiplier() != 0F) {
        setArHighAwarenessMinPenaltyMultiplier(other.getArHighAwarenessMinPenaltyMultiplier());
      }
      if (other.getArPlusAttemptsUntilFleeMax() != 0) {
        setArPlusAttemptsUntilFleeMax(other.getArPlusAttemptsUntilFleeMax());
      }
      if (other.getArPlusAttemptsUntilFleeInfinite() != 0) {
        setArPlusAttemptsUntilFleeInfinite(other.getArPlusAttemptsUntilFleeInfinite());
      }
      if (other.getEscapedBonusMultiplierMax() != 0F) {
        setEscapedBonusMultiplierMax(other.getEscapedBonusMultiplierMax());
      }
      if (other.getEscapedBonusMultiplierByExcellentThrow() != 0F) {
        setEscapedBonusMultiplierByExcellentThrow(other.getEscapedBonusMultiplierByExcellentThrow());
      }
      if (other.getEscapedBonusMultiplierByGreatThrow() != 0F) {
        setEscapedBonusMultiplierByGreatThrow(other.getEscapedBonusMultiplierByGreatThrow());
      }
      if (other.getEscapedBonusMultiplierByNiceThrow() != 0F) {
        setEscapedBonusMultiplierByNiceThrow(other.getEscapedBonusMultiplierByNiceThrow());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      POGOProtos.Settings.Master.EncounterSettings parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (POGOProtos.Settings.Master.EncounterSettings) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private float spinBonusThreshold_ ;
    /**
     * <code>float spin_bonus_threshold = 1;</code>
     * @return The spinBonusThreshold.
     */
    public float getSpinBonusThreshold() {
      return spinBonusThreshold_;
    }
    /**
     * <code>float spin_bonus_threshold = 1;</code>
     * @param value The spinBonusThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setSpinBonusThreshold(float value) {
      
      spinBonusThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float spin_bonus_threshold = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpinBonusThreshold() {
      
      spinBonusThreshold_ = 0F;
      onChanged();
      return this;
    }

    private float excellentThrowThreshold_ ;
    /**
     * <code>float excellent_throw_threshold = 2;</code>
     * @return The excellentThrowThreshold.
     */
    public float getExcellentThrowThreshold() {
      return excellentThrowThreshold_;
    }
    /**
     * <code>float excellent_throw_threshold = 2;</code>
     * @param value The excellentThrowThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setExcellentThrowThreshold(float value) {
      
      excellentThrowThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float excellent_throw_threshold = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearExcellentThrowThreshold() {
      
      excellentThrowThreshold_ = 0F;
      onChanged();
      return this;
    }

    private float greatThrowThreshold_ ;
    /**
     * <code>float great_throw_threshold = 3;</code>
     * @return The greatThrowThreshold.
     */
    public float getGreatThrowThreshold() {
      return greatThrowThreshold_;
    }
    /**
     * <code>float great_throw_threshold = 3;</code>
     * @param value The greatThrowThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setGreatThrowThreshold(float value) {
      
      greatThrowThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float great_throw_threshold = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearGreatThrowThreshold() {
      
      greatThrowThreshold_ = 0F;
      onChanged();
      return this;
    }

    private float niceThrowThreshold_ ;
    /**
     * <code>float nice_throw_threshold = 4;</code>
     * @return The niceThrowThreshold.
     */
    public float getNiceThrowThreshold() {
      return niceThrowThreshold_;
    }
    /**
     * <code>float nice_throw_threshold = 4;</code>
     * @param value The niceThrowThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setNiceThrowThreshold(float value) {
      
      niceThrowThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float nice_throw_threshold = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearNiceThrowThreshold() {
      
      niceThrowThreshold_ = 0F;
      onChanged();
      return this;
    }

    private int milestoneThreshold_ ;
    /**
     * <code>int32 milestone_threshold = 5;</code>
     * @return The milestoneThreshold.
     */
    public int getMilestoneThreshold() {
      return milestoneThreshold_;
    }
    /**
     * <code>int32 milestone_threshold = 5;</code>
     * @param value The milestoneThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setMilestoneThreshold(int value) {
      
      milestoneThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 milestone_threshold = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMilestoneThreshold() {
      
      milestoneThreshold_ = 0;
      onChanged();
      return this;
    }

    private boolean arPlusModeEnabled_ ;
    /**
     * <code>bool ar_plus_mode_enabled = 6;</code>
     * @return The arPlusModeEnabled.
     */
    public boolean getArPlusModeEnabled() {
      return arPlusModeEnabled_;
    }
    /**
     * <code>bool ar_plus_mode_enabled = 6;</code>
     * @param value The arPlusModeEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setArPlusModeEnabled(boolean value) {
      
      arPlusModeEnabled_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool ar_plus_mode_enabled = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearArPlusModeEnabled() {
      
      arPlusModeEnabled_ = false;
      onChanged();
      return this;
    }

    private float arCloseProximityThreshold_ ;
    /**
     * <code>float ar_close_proximity_threshold = 7;</code>
     * @return The arCloseProximityThreshold.
     */
    public float getArCloseProximityThreshold() {
      return arCloseProximityThreshold_;
    }
    /**
     * <code>float ar_close_proximity_threshold = 7;</code>
     * @param value The arCloseProximityThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setArCloseProximityThreshold(float value) {
      
      arCloseProximityThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float ar_close_proximity_threshold = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearArCloseProximityThreshold() {
      
      arCloseProximityThreshold_ = 0F;
      onChanged();
      return this;
    }

    private float arLowAwarenessThreshold_ ;
    /**
     * <code>float ar_low_awareness_threshold = 8;</code>
     * @return The arLowAwarenessThreshold.
     */
    public float getArLowAwarenessThreshold() {
      return arLowAwarenessThreshold_;
    }
    /**
     * <code>float ar_low_awareness_threshold = 8;</code>
     * @param value The arLowAwarenessThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setArLowAwarenessThreshold(float value) {
      
      arLowAwarenessThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float ar_low_awareness_threshold = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearArLowAwarenessThreshold() {
      
      arLowAwarenessThreshold_ = 0F;
      onChanged();
      return this;
    }

    private float arCloseProximityMultiplier_ ;
    /**
     * <code>float ar_close_proximity_multiplier = 9;</code>
     * @return The arCloseProximityMultiplier.
     */
    public float getArCloseProximityMultiplier() {
      return arCloseProximityMultiplier_;
    }
    /**
     * <code>float ar_close_proximity_multiplier = 9;</code>
     * @param value The arCloseProximityMultiplier to set.
     * @return This builder for chaining.
     */
    public Builder setArCloseProximityMultiplier(float value) {
      
      arCloseProximityMultiplier_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float ar_close_proximity_multiplier = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearArCloseProximityMultiplier() {
      
      arCloseProximityMultiplier_ = 0F;
      onChanged();
      return this;
    }

    private float arAwarenessPenaltyThreshold_ ;
    /**
     * <code>float ar_awareness_penalty_threshold = 10;</code>
     * @return The arAwarenessPenaltyThreshold.
     */
    public float getArAwarenessPenaltyThreshold() {
      return arAwarenessPenaltyThreshold_;
    }
    /**
     * <code>float ar_awareness_penalty_threshold = 10;</code>
     * @param value The arAwarenessPenaltyThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setArAwarenessPenaltyThreshold(float value) {
      
      arAwarenessPenaltyThreshold_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float ar_awareness_penalty_threshold = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearArAwarenessPenaltyThreshold() {
      
      arAwarenessPenaltyThreshold_ = 0F;
      onChanged();
      return this;
    }

    private float arLowAwarenessMaxMultiplier_ ;
    /**
     * <code>float ar_low_awareness_max_multiplier = 11;</code>
     * @return The arLowAwarenessMaxMultiplier.
     */
    public float getArLowAwarenessMaxMultiplier() {
      return arLowAwarenessMaxMultiplier_;
    }
    /**
     * <code>float ar_low_awareness_max_multiplier = 11;</code>
     * @param value The arLowAwarenessMaxMultiplier to set.
     * @return This builder for chaining.
     */
    public Builder setArLowAwarenessMaxMultiplier(float value) {
      
      arLowAwarenessMaxMultiplier_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float ar_low_awareness_max_multiplier = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearArLowAwarenessMaxMultiplier() {
      
      arLowAwarenessMaxMultiplier_ = 0F;
      onChanged();
      return this;
    }

    private float arHighAwarenessMinPenaltyMultiplier_ ;
    /**
     * <code>float ar_high_awareness_min_penalty_multiplier = 12;</code>
     * @return The arHighAwarenessMinPenaltyMultiplier.
     */
    public float getArHighAwarenessMinPenaltyMultiplier() {
      return arHighAwarenessMinPenaltyMultiplier_;
    }
    /**
     * <code>float ar_high_awareness_min_penalty_multiplier = 12;</code>
     * @param value The arHighAwarenessMinPenaltyMultiplier to set.
     * @return This builder for chaining.
     */
    public Builder setArHighAwarenessMinPenaltyMultiplier(float value) {
      
      arHighAwarenessMinPenaltyMultiplier_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float ar_high_awareness_min_penalty_multiplier = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearArHighAwarenessMinPenaltyMultiplier() {
      
      arHighAwarenessMinPenaltyMultiplier_ = 0F;
      onChanged();
      return this;
    }

    private int arPlusAttemptsUntilFleeMax_ ;
    /**
     * <code>int32 ar_plus_attempts_until_flee_max = 13;</code>
     * @return The arPlusAttemptsUntilFleeMax.
     */
    public int getArPlusAttemptsUntilFleeMax() {
      return arPlusAttemptsUntilFleeMax_;
    }
    /**
     * <code>int32 ar_plus_attempts_until_flee_max = 13;</code>
     * @param value The arPlusAttemptsUntilFleeMax to set.
     * @return This builder for chaining.
     */
    public Builder setArPlusAttemptsUntilFleeMax(int value) {
      
      arPlusAttemptsUntilFleeMax_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ar_plus_attempts_until_flee_max = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearArPlusAttemptsUntilFleeMax() {
      
      arPlusAttemptsUntilFleeMax_ = 0;
      onChanged();
      return this;
    }

    private int arPlusAttemptsUntilFleeInfinite_ ;
    /**
     * <code>int32 ar_plus_attempts_until_flee_infinite = 14;</code>
     * @return The arPlusAttemptsUntilFleeInfinite.
     */
    public int getArPlusAttemptsUntilFleeInfinite() {
      return arPlusAttemptsUntilFleeInfinite_;
    }
    /**
     * <code>int32 ar_plus_attempts_until_flee_infinite = 14;</code>
     * @param value The arPlusAttemptsUntilFleeInfinite to set.
     * @return This builder for chaining.
     */
    public Builder setArPlusAttemptsUntilFleeInfinite(int value) {
      
      arPlusAttemptsUntilFleeInfinite_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 ar_plus_attempts_until_flee_infinite = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearArPlusAttemptsUntilFleeInfinite() {
      
      arPlusAttemptsUntilFleeInfinite_ = 0;
      onChanged();
      return this;
    }

    private float escapedBonusMultiplierMax_ ;
    /**
     * <code>float escaped_bonus_multiplier_max = 15;</code>
     * @return The escapedBonusMultiplierMax.
     */
    public float getEscapedBonusMultiplierMax() {
      return escapedBonusMultiplierMax_;
    }
    /**
     * <code>float escaped_bonus_multiplier_max = 15;</code>
     * @param value The escapedBonusMultiplierMax to set.
     * @return This builder for chaining.
     */
    public Builder setEscapedBonusMultiplierMax(float value) {
      
      escapedBonusMultiplierMax_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float escaped_bonus_multiplier_max = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearEscapedBonusMultiplierMax() {
      
      escapedBonusMultiplierMax_ = 0F;
      onChanged();
      return this;
    }

    private float escapedBonusMultiplierByExcellentThrow_ ;
    /**
     * <code>float escaped_bonus_multiplier_by_excellent_throw = 16;</code>
     * @return The escapedBonusMultiplierByExcellentThrow.
     */
    public float getEscapedBonusMultiplierByExcellentThrow() {
      return escapedBonusMultiplierByExcellentThrow_;
    }
    /**
     * <code>float escaped_bonus_multiplier_by_excellent_throw = 16;</code>
     * @param value The escapedBonusMultiplierByExcellentThrow to set.
     * @return This builder for chaining.
     */
    public Builder setEscapedBonusMultiplierByExcellentThrow(float value) {
      
      escapedBonusMultiplierByExcellentThrow_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float escaped_bonus_multiplier_by_excellent_throw = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearEscapedBonusMultiplierByExcellentThrow() {
      
      escapedBonusMultiplierByExcellentThrow_ = 0F;
      onChanged();
      return this;
    }

    private float escapedBonusMultiplierByGreatThrow_ ;
    /**
     * <code>float escaped_bonus_multiplier_by_great_throw = 17;</code>
     * @return The escapedBonusMultiplierByGreatThrow.
     */
    public float getEscapedBonusMultiplierByGreatThrow() {
      return escapedBonusMultiplierByGreatThrow_;
    }
    /**
     * <code>float escaped_bonus_multiplier_by_great_throw = 17;</code>
     * @param value The escapedBonusMultiplierByGreatThrow to set.
     * @return This builder for chaining.
     */
    public Builder setEscapedBonusMultiplierByGreatThrow(float value) {
      
      escapedBonusMultiplierByGreatThrow_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float escaped_bonus_multiplier_by_great_throw = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearEscapedBonusMultiplierByGreatThrow() {
      
      escapedBonusMultiplierByGreatThrow_ = 0F;
      onChanged();
      return this;
    }

    private float escapedBonusMultiplierByNiceThrow_ ;
    /**
     * <code>float escaped_bonus_multiplier_by_nice_throw = 18;</code>
     * @return The escapedBonusMultiplierByNiceThrow.
     */
    public float getEscapedBonusMultiplierByNiceThrow() {
      return escapedBonusMultiplierByNiceThrow_;
    }
    /**
     * <code>float escaped_bonus_multiplier_by_nice_throw = 18;</code>
     * @param value The escapedBonusMultiplierByNiceThrow to set.
     * @return This builder for chaining.
     */
    public Builder setEscapedBonusMultiplierByNiceThrow(float value) {
      
      escapedBonusMultiplierByNiceThrow_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float escaped_bonus_multiplier_by_nice_throw = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearEscapedBonusMultiplierByNiceThrow() {
      
      escapedBonusMultiplierByNiceThrow_ = 0F;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:POGOProtos.Settings.Master.EncounterSettings)
  }

  // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.EncounterSettings)
  private static final POGOProtos.Settings.Master.EncounterSettings DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new POGOProtos.Settings.Master.EncounterSettings();
  }

  public static POGOProtos.Settings.Master.EncounterSettings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EncounterSettings>
      PARSER = new com.google.protobuf.AbstractParser<EncounterSettings>() {
    @java.lang.Override
    public EncounterSettings parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new EncounterSettings(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<EncounterSettings> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<EncounterSettings> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public POGOProtos.Settings.Master.EncounterSettings getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

