// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/OpenCombatChallengeResponse.proto

package POGOProtos.Networking.Responses;

public final class OpenCombatChallengeResponseOuterClass {
  private OpenCombatChallengeResponseOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_POGOProtos_Networking_Responses_OpenCombatChallengeResponse_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_POGOProtos_Networking_Responses_OpenCombatChallengeResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nAPOGOProtos/Networking/Responses/OpenCo" +
      "mbatChallengeResponse.proto\022\037POGOProtos." +
      "Networking.Responses\032,POGOProtos/Data/Co" +
      "mbat/CombatChallenge.proto\"\260\004\n\033OpenComba" +
      "tChallengeResponse\022S\n\006result\030\001 \001(\0162C.POG" +
      "OProtos.Networking.Responses.OpenCombatC" +
      "hallengeResponse.Result\022:\n\tchallenge\030\002 \001" +
      "(\0132\'.POGOProtos.Data.Combat.CombatChalle" +
      "nge\"\377\002\n\006Result\022\t\n\005UNSET\020\000\022\013\n\007SUCCESS\020\001\022!" +
      "\n\035ERROR_INVALID_CHALLENGE_STATE\020\002\022\035\n\031ERR" +
      "OR_CHALLENGE_NOT_FOUND\020\003\022\"\n\036ERROR_POKEMO" +
      "N_NOT_IN_INVENTORY\020\004\022\035\n\031ERROR_NOT_ELIGIB" +
      "LE_LEAGUE\020\005\022$\n ERROR_PLAYER_BELOW_MINIMU" +
      "M_LEVEL\020\006\022\032\n\026ERROR_ALREADY_TIMEDOUT\020\010\022\033\n" +
      "\027ERROR_ALREADY_CANCELLED\020\t\022\032\n\026ERROR_FRIE" +
      "ND_NOT_FOUND\020\n\022%\n!ERROR_FAILED_TO_SEND_N" +
      "OTIFICATION\020\013\022\027\n\023ERROR_ACCESS_DENIED\020\014\022\035" +
      "\n\031ERROR_INELIGIBLE_OPPONENT\020\rB\002P\001b\006proto" +
      "3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          POGOProtos.Data.Combat.CombatChallengeOuterClass.getDescriptor(),
        });
    internal_static_POGOProtos_Networking_Responses_OpenCombatChallengeResponse_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_POGOProtos_Networking_Responses_OpenCombatChallengeResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_POGOProtos_Networking_Responses_OpenCombatChallengeResponse_descriptor,
        new java.lang.String[] { "Result", "Challenge", });
    POGOProtos.Data.Combat.CombatChallengeOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
