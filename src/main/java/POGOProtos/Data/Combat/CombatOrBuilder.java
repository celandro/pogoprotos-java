// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Combat/Combat.proto

package POGOProtos.Data.Combat;

public interface CombatOrBuilder extends
    // @@protoc_insertion_point(interface_extends:POGOProtos.Data.Combat.Combat)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.POGOProtos.Data.Combat.Combat.CombatState combat_state = 1;</code>
   * @return The enum numeric value on the wire for combatState.
   */
  int getCombatStateValue();
  /**
   * <code>.POGOProtos.Data.Combat.Combat.CombatState combat_state = 1;</code>
   * @return The combatState.
   */
  POGOProtos.Data.Combat.Combat.CombatState getCombatState();

  /**
   * <code>string combat_id = 2;</code>
   * @return The combatId.
   */
  java.lang.String getCombatId();
  /**
   * <code>string combat_id = 2;</code>
   * @return The bytes for combatId.
   */
  com.google.protobuf.ByteString
      getCombatIdBytes();

  /**
   * <code>.POGOProtos.Data.Combat.CombatPlayer player = 3;</code>
   * @return Whether the player field is set.
   */
  boolean hasPlayer();
  /**
   * <code>.POGOProtos.Data.Combat.CombatPlayer player = 3;</code>
   * @return The player.
   */
  POGOProtos.Data.Combat.CombatPlayer getPlayer();
  /**
   * <code>.POGOProtos.Data.Combat.CombatPlayer player = 3;</code>
   */
  POGOProtos.Data.Combat.CombatPlayerOrBuilder getPlayerOrBuilder();

  /**
   * <code>.POGOProtos.Data.Combat.CombatPlayer opponent = 4;</code>
   * @return Whether the opponent field is set.
   */
  boolean hasOpponent();
  /**
   * <code>.POGOProtos.Data.Combat.CombatPlayer opponent = 4;</code>
   * @return The opponent.
   */
  POGOProtos.Data.Combat.CombatPlayer getOpponent();
  /**
   * <code>.POGOProtos.Data.Combat.CombatPlayer opponent = 4;</code>
   */
  POGOProtos.Data.Combat.CombatPlayerOrBuilder getOpponentOrBuilder();

  /**
   * <code>int64 combat_start_ms = 5;</code>
   * @return The combatStartMs.
   */
  long getCombatStartMs();

  /**
   * <code>int64 combat_end_ms = 6;</code>
   * @return The combatEndMs.
   */
  long getCombatEndMs();

  /**
   * <code>int64 server_ms = 7;</code>
   * @return The serverMs.
   */
  long getServerMs();

  /**
   * <code>int32 current_turn = 8;</code>
   * @return The currentTurn.
   */
  int getCurrentTurn();

  /**
   * <code>int64 turn_start_ms = 9;</code>
   * @return The turnStartMs.
   */
  long getTurnStartMs();

  /**
   * <code>int64 minigame_end_ms = 10;</code>
   * @return The minigameEndMs.
   */
  long getMinigameEndMs();

  /**
   * <code>int64 minigame_submit_score_end_ms = 11;</code>
   * @return The minigameSubmitScoreEndMs.
   */
  long getMinigameSubmitScoreEndMs();

  /**
   * <code>int64 change_pokemon_end_ms = 12;</code>
   * @return The changePokemonEndMs.
   */
  long getChangePokemonEndMs();

  /**
   * <code>int64 quick_swap_cooldown_duration_ms = 13;</code>
   * @return The quickSwapCooldownDurationMs.
   */
  long getQuickSwapCooldownDurationMs();

  /**
   * <code>int64 state_change_delay_until_turn = 14;</code>
   * @return The stateChangeDelayUntilTurn.
   */
  long getStateChangeDelayUntilTurn();
}
