// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Rpc.proto

package POGOProtos.Rpc;

/**
 * <pre>
 * ref: NIMOCCNGHEN
 * </pre>
 *
 * Protobuf type {@code POGOProtos.Rpc.CameraSettingsProto}
 */
public final class CameraSettingsProto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:POGOProtos.Rpc.CameraSettingsProto)
    CameraSettingsProtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CameraSettingsProto.newBuilder() to construct.
  private CameraSettingsProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CameraSettingsProto() {
    nextCamera_ = "";
    interpolation_ = java.util.Collections.emptyList();
    targetType_ = java.util.Collections.emptyList();
    easeInSpeed_ = emptyFloatList();
    easeOutSpeed_ = emptyFloatList();
    durationS_ = emptyFloatList();
    waitS_ = emptyFloatList();
    transitionS_ = emptyFloatList();
    angleDeg_ = emptyFloatList();
    angleOffsetDeg_ = emptyFloatList();
    pitchDeg_ = emptyFloatList();
    pitchOffsetDeg_ = emptyFloatList();
    rollDeg_ = emptyFloatList();
    distanceM_ = emptyFloatList();
    heightPercent_ = emptyFloatList();
    vertCtrRatio_ = emptyFloatList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CameraSettingsProto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CameraSettingsProto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            nextCamera_ = s;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              interpolation_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            interpolation_.add(rawValue);
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                interpolation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              interpolation_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              targetType_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            targetType_.add(rawValue);
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                targetType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              targetType_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 37: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              easeInSpeed_ = newFloatList();
              mutable_bitField0_ |= 0x00000004;
            }
            easeInSpeed_.addFloat(input.readFloat());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
              easeInSpeed_ = newFloatList();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              easeInSpeed_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 45: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              easeOutSpeed_ = newFloatList();
              mutable_bitField0_ |= 0x00000008;
            }
            easeOutSpeed_.addFloat(input.readFloat());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
              easeOutSpeed_ = newFloatList();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              easeOutSpeed_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 53: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              durationS_ = newFloatList();
              mutable_bitField0_ |= 0x00000010;
            }
            durationS_.addFloat(input.readFloat());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
              durationS_ = newFloatList();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              durationS_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 61: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              waitS_ = newFloatList();
              mutable_bitField0_ |= 0x00000020;
            }
            waitS_.addFloat(input.readFloat());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) != 0) && input.getBytesUntilLimit() > 0) {
              waitS_ = newFloatList();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              waitS_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 69: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              transitionS_ = newFloatList();
              mutable_bitField0_ |= 0x00000040;
            }
            transitionS_.addFloat(input.readFloat());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) != 0) && input.getBytesUntilLimit() > 0) {
              transitionS_ = newFloatList();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              transitionS_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 77: {
            if (!((mutable_bitField0_ & 0x00000080) != 0)) {
              angleDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000080;
            }
            angleDeg_.addFloat(input.readFloat());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) != 0) && input.getBytesUntilLimit() > 0) {
              angleDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              angleDeg_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 85: {
            if (!((mutable_bitField0_ & 0x00000100) != 0)) {
              angleOffsetDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000100;
            }
            angleOffsetDeg_.addFloat(input.readFloat());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) != 0) && input.getBytesUntilLimit() > 0) {
              angleOffsetDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              angleOffsetDeg_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 93: {
            if (!((mutable_bitField0_ & 0x00000200) != 0)) {
              pitchDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000200;
            }
            pitchDeg_.addFloat(input.readFloat());
            break;
          }
          case 90: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) != 0) && input.getBytesUntilLimit() > 0) {
              pitchDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              pitchDeg_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 101: {
            if (!((mutable_bitField0_ & 0x00000400) != 0)) {
              pitchOffsetDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000400;
            }
            pitchOffsetDeg_.addFloat(input.readFloat());
            break;
          }
          case 98: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000400) != 0) && input.getBytesUntilLimit() > 0) {
              pitchOffsetDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000400;
            }
            while (input.getBytesUntilLimit() > 0) {
              pitchOffsetDeg_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 109: {
            if (!((mutable_bitField0_ & 0x00000800) != 0)) {
              rollDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000800;
            }
            rollDeg_.addFloat(input.readFloat());
            break;
          }
          case 106: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000800) != 0) && input.getBytesUntilLimit() > 0) {
              rollDeg_ = newFloatList();
              mutable_bitField0_ |= 0x00000800;
            }
            while (input.getBytesUntilLimit() > 0) {
              rollDeg_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 117: {
            if (!((mutable_bitField0_ & 0x00001000) != 0)) {
              distanceM_ = newFloatList();
              mutable_bitField0_ |= 0x00001000;
            }
            distanceM_.addFloat(input.readFloat());
            break;
          }
          case 114: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00001000) != 0) && input.getBytesUntilLimit() > 0) {
              distanceM_ = newFloatList();
              mutable_bitField0_ |= 0x00001000;
            }
            while (input.getBytesUntilLimit() > 0) {
              distanceM_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 125: {
            if (!((mutable_bitField0_ & 0x00002000) != 0)) {
              heightPercent_ = newFloatList();
              mutable_bitField0_ |= 0x00002000;
            }
            heightPercent_.addFloat(input.readFloat());
            break;
          }
          case 122: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00002000) != 0) && input.getBytesUntilLimit() > 0) {
              heightPercent_ = newFloatList();
              mutable_bitField0_ |= 0x00002000;
            }
            while (input.getBytesUntilLimit() > 0) {
              heightPercent_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 133: {
            if (!((mutable_bitField0_ & 0x00004000) != 0)) {
              vertCtrRatio_ = newFloatList();
              mutable_bitField0_ |= 0x00004000;
            }
            vertCtrRatio_.addFloat(input.readFloat());
            break;
          }
          case 130: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00004000) != 0) && input.getBytesUntilLimit() > 0) {
              vertCtrRatio_ = newFloatList();
              mutable_bitField0_ |= 0x00004000;
            }
            while (input.getBytesUntilLimit() > 0) {
              vertCtrRatio_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        interpolation_ = java.util.Collections.unmodifiableList(interpolation_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        targetType_ = java.util.Collections.unmodifiableList(targetType_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        easeInSpeed_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        easeOutSpeed_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        durationS_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        waitS_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000040) != 0)) {
        transitionS_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000080) != 0)) {
        angleDeg_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000100) != 0)) {
        angleOffsetDeg_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000200) != 0)) {
        pitchDeg_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000400) != 0)) {
        pitchOffsetDeg_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000800) != 0)) {
        rollDeg_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00001000) != 0)) {
        distanceM_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00002000) != 0)) {
        heightPercent_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00004000) != 0)) {
        vertCtrRatio_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return POGOProtos.Rpc.POGOProtosRpc.internal_static_POGOProtos_Rpc_CameraSettingsProto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return POGOProtos.Rpc.POGOProtosRpc.internal_static_POGOProtos_Rpc_CameraSettingsProto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            POGOProtos.Rpc.CameraSettingsProto.class, POGOProtos.Rpc.CameraSettingsProto.Builder.class);
  }

  public static final int NEXT_CAMERA_FIELD_NUMBER = 1;
  private volatile java.lang.Object nextCamera_;
  /**
   * <code>string next_camera = 1;</code>
   * @return The nextCamera.
   */
  @java.lang.Override
  public java.lang.String getNextCamera() {
    java.lang.Object ref = nextCamera_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nextCamera_ = s;
      return s;
    }
  }
  /**
   * <code>string next_camera = 1;</code>
   * @return The bytes for nextCamera.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNextCameraBytes() {
    java.lang.Object ref = nextCamera_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      nextCamera_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INTERPOLATION_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Integer> interpolation_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, POGOProtos.Rpc.CameraInterpolation> interpolation_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, POGOProtos.Rpc.CameraInterpolation>() {
            public POGOProtos.Rpc.CameraInterpolation convert(java.lang.Integer from) {
              @SuppressWarnings("deprecation")
              POGOProtos.Rpc.CameraInterpolation result = POGOProtos.Rpc.CameraInterpolation.valueOf(from);
              return result == null ? POGOProtos.Rpc.CameraInterpolation.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
   * @return A list containing the interpolation.
   */
  @java.lang.Override
  public java.util.List<POGOProtos.Rpc.CameraInterpolation> getInterpolationList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, POGOProtos.Rpc.CameraInterpolation>(interpolation_, interpolation_converter_);
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
   * @return The count of interpolation.
   */
  @java.lang.Override
  public int getInterpolationCount() {
    return interpolation_.size();
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
   * @param index The index of the element to return.
   * @return The interpolation at the given index.
   */
  @java.lang.Override
  public POGOProtos.Rpc.CameraInterpolation getInterpolation(int index) {
    return interpolation_converter_.convert(interpolation_.get(index));
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
   * @return A list containing the enum numeric values on the wire for interpolation.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getInterpolationValueList() {
    return interpolation_;
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of interpolation at the given index.
   */
  @java.lang.Override
  public int getInterpolationValue(int index) {
    return interpolation_.get(index);
  }
  private int interpolationMemoizedSerializedSize;

  public static final int TARGET_TYPE_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Integer> targetType_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, POGOProtos.Rpc.CameraTarget> targetType_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, POGOProtos.Rpc.CameraTarget>() {
            public POGOProtos.Rpc.CameraTarget convert(java.lang.Integer from) {
              @SuppressWarnings("deprecation")
              POGOProtos.Rpc.CameraTarget result = POGOProtos.Rpc.CameraTarget.valueOf(from);
              return result == null ? POGOProtos.Rpc.CameraTarget.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
   * @return A list containing the targetType.
   */
  @java.lang.Override
  public java.util.List<POGOProtos.Rpc.CameraTarget> getTargetTypeList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, POGOProtos.Rpc.CameraTarget>(targetType_, targetType_converter_);
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
   * @return The count of targetType.
   */
  @java.lang.Override
  public int getTargetTypeCount() {
    return targetType_.size();
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
   * @param index The index of the element to return.
   * @return The targetType at the given index.
   */
  @java.lang.Override
  public POGOProtos.Rpc.CameraTarget getTargetType(int index) {
    return targetType_converter_.convert(targetType_.get(index));
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
   * @return A list containing the enum numeric values on the wire for targetType.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getTargetTypeValueList() {
    return targetType_;
  }
  /**
   * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of targetType at the given index.
   */
  @java.lang.Override
  public int getTargetTypeValue(int index) {
    return targetType_.get(index);
  }
  private int targetTypeMemoizedSerializedSize;

  public static final int EASE_IN_SPEED_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.FloatList easeInSpeed_;
  /**
   * <code>repeated float ease_in_speed = 4;</code>
   * @return A list containing the easeInSpeed.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getEaseInSpeedList() {
    return easeInSpeed_;
  }
  /**
   * <code>repeated float ease_in_speed = 4;</code>
   * @return The count of easeInSpeed.
   */
  public int getEaseInSpeedCount() {
    return easeInSpeed_.size();
  }
  /**
   * <code>repeated float ease_in_speed = 4;</code>
   * @param index The index of the element to return.
   * @return The easeInSpeed at the given index.
   */
  public float getEaseInSpeed(int index) {
    return easeInSpeed_.getFloat(index);
  }
  private int easeInSpeedMemoizedSerializedSize = -1;

  public static final int EASE_OUT_SPEED_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.FloatList easeOutSpeed_;
  /**
   * <code>repeated float ease_out_speed = 5;</code>
   * @return A list containing the easeOutSpeed.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getEaseOutSpeedList() {
    return easeOutSpeed_;
  }
  /**
   * <code>repeated float ease_out_speed = 5;</code>
   * @return The count of easeOutSpeed.
   */
  public int getEaseOutSpeedCount() {
    return easeOutSpeed_.size();
  }
  /**
   * <code>repeated float ease_out_speed = 5;</code>
   * @param index The index of the element to return.
   * @return The easeOutSpeed at the given index.
   */
  public float getEaseOutSpeed(int index) {
    return easeOutSpeed_.getFloat(index);
  }
  private int easeOutSpeedMemoizedSerializedSize = -1;

  public static final int DURATION_S_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.FloatList durationS_;
  /**
   * <code>repeated float duration_s = 6;</code>
   * @return A list containing the durationS.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getDurationSList() {
    return durationS_;
  }
  /**
   * <code>repeated float duration_s = 6;</code>
   * @return The count of durationS.
   */
  public int getDurationSCount() {
    return durationS_.size();
  }
  /**
   * <code>repeated float duration_s = 6;</code>
   * @param index The index of the element to return.
   * @return The durationS at the given index.
   */
  public float getDurationS(int index) {
    return durationS_.getFloat(index);
  }
  private int durationSMemoizedSerializedSize = -1;

  public static final int WAIT_S_FIELD_NUMBER = 7;
  private com.google.protobuf.Internal.FloatList waitS_;
  /**
   * <code>repeated float wait_s = 7;</code>
   * @return A list containing the waitS.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getWaitSList() {
    return waitS_;
  }
  /**
   * <code>repeated float wait_s = 7;</code>
   * @return The count of waitS.
   */
  public int getWaitSCount() {
    return waitS_.size();
  }
  /**
   * <code>repeated float wait_s = 7;</code>
   * @param index The index of the element to return.
   * @return The waitS at the given index.
   */
  public float getWaitS(int index) {
    return waitS_.getFloat(index);
  }
  private int waitSMemoizedSerializedSize = -1;

  public static final int TRANSITION_S_FIELD_NUMBER = 8;
  private com.google.protobuf.Internal.FloatList transitionS_;
  /**
   * <code>repeated float transition_s = 8;</code>
   * @return A list containing the transitionS.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getTransitionSList() {
    return transitionS_;
  }
  /**
   * <code>repeated float transition_s = 8;</code>
   * @return The count of transitionS.
   */
  public int getTransitionSCount() {
    return transitionS_.size();
  }
  /**
   * <code>repeated float transition_s = 8;</code>
   * @param index The index of the element to return.
   * @return The transitionS at the given index.
   */
  public float getTransitionS(int index) {
    return transitionS_.getFloat(index);
  }
  private int transitionSMemoizedSerializedSize = -1;

  public static final int ANGLE_DEG_FIELD_NUMBER = 9;
  private com.google.protobuf.Internal.FloatList angleDeg_;
  /**
   * <code>repeated float angle_deg = 9;</code>
   * @return A list containing the angleDeg.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getAngleDegList() {
    return angleDeg_;
  }
  /**
   * <code>repeated float angle_deg = 9;</code>
   * @return The count of angleDeg.
   */
  public int getAngleDegCount() {
    return angleDeg_.size();
  }
  /**
   * <code>repeated float angle_deg = 9;</code>
   * @param index The index of the element to return.
   * @return The angleDeg at the given index.
   */
  public float getAngleDeg(int index) {
    return angleDeg_.getFloat(index);
  }
  private int angleDegMemoizedSerializedSize = -1;

  public static final int ANGLE_OFFSET_DEG_FIELD_NUMBER = 10;
  private com.google.protobuf.Internal.FloatList angleOffsetDeg_;
  /**
   * <code>repeated float angle_offset_deg = 10;</code>
   * @return A list containing the angleOffsetDeg.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getAngleOffsetDegList() {
    return angleOffsetDeg_;
  }
  /**
   * <code>repeated float angle_offset_deg = 10;</code>
   * @return The count of angleOffsetDeg.
   */
  public int getAngleOffsetDegCount() {
    return angleOffsetDeg_.size();
  }
  /**
   * <code>repeated float angle_offset_deg = 10;</code>
   * @param index The index of the element to return.
   * @return The angleOffsetDeg at the given index.
   */
  public float getAngleOffsetDeg(int index) {
    return angleOffsetDeg_.getFloat(index);
  }
  private int angleOffsetDegMemoizedSerializedSize = -1;

  public static final int PITCH_DEG_FIELD_NUMBER = 11;
  private com.google.protobuf.Internal.FloatList pitchDeg_;
  /**
   * <code>repeated float pitch_deg = 11;</code>
   * @return A list containing the pitchDeg.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getPitchDegList() {
    return pitchDeg_;
  }
  /**
   * <code>repeated float pitch_deg = 11;</code>
   * @return The count of pitchDeg.
   */
  public int getPitchDegCount() {
    return pitchDeg_.size();
  }
  /**
   * <code>repeated float pitch_deg = 11;</code>
   * @param index The index of the element to return.
   * @return The pitchDeg at the given index.
   */
  public float getPitchDeg(int index) {
    return pitchDeg_.getFloat(index);
  }
  private int pitchDegMemoizedSerializedSize = -1;

  public static final int PITCH_OFFSET_DEG_FIELD_NUMBER = 12;
  private com.google.protobuf.Internal.FloatList pitchOffsetDeg_;
  /**
   * <code>repeated float pitch_offset_deg = 12;</code>
   * @return A list containing the pitchOffsetDeg.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getPitchOffsetDegList() {
    return pitchOffsetDeg_;
  }
  /**
   * <code>repeated float pitch_offset_deg = 12;</code>
   * @return The count of pitchOffsetDeg.
   */
  public int getPitchOffsetDegCount() {
    return pitchOffsetDeg_.size();
  }
  /**
   * <code>repeated float pitch_offset_deg = 12;</code>
   * @param index The index of the element to return.
   * @return The pitchOffsetDeg at the given index.
   */
  public float getPitchOffsetDeg(int index) {
    return pitchOffsetDeg_.getFloat(index);
  }
  private int pitchOffsetDegMemoizedSerializedSize = -1;

  public static final int ROLL_DEG_FIELD_NUMBER = 13;
  private com.google.protobuf.Internal.FloatList rollDeg_;
  /**
   * <code>repeated float roll_deg = 13;</code>
   * @return A list containing the rollDeg.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getRollDegList() {
    return rollDeg_;
  }
  /**
   * <code>repeated float roll_deg = 13;</code>
   * @return The count of rollDeg.
   */
  public int getRollDegCount() {
    return rollDeg_.size();
  }
  /**
   * <code>repeated float roll_deg = 13;</code>
   * @param index The index of the element to return.
   * @return The rollDeg at the given index.
   */
  public float getRollDeg(int index) {
    return rollDeg_.getFloat(index);
  }
  private int rollDegMemoizedSerializedSize = -1;

  public static final int DISTANCE_M_FIELD_NUMBER = 14;
  private com.google.protobuf.Internal.FloatList distanceM_;
  /**
   * <code>repeated float distance_m = 14;</code>
   * @return A list containing the distanceM.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getDistanceMList() {
    return distanceM_;
  }
  /**
   * <code>repeated float distance_m = 14;</code>
   * @return The count of distanceM.
   */
  public int getDistanceMCount() {
    return distanceM_.size();
  }
  /**
   * <code>repeated float distance_m = 14;</code>
   * @param index The index of the element to return.
   * @return The distanceM at the given index.
   */
  public float getDistanceM(int index) {
    return distanceM_.getFloat(index);
  }
  private int distanceMMemoizedSerializedSize = -1;

  public static final int HEIGHT_PERCENT_FIELD_NUMBER = 15;
  private com.google.protobuf.Internal.FloatList heightPercent_;
  /**
   * <code>repeated float height_percent = 15;</code>
   * @return A list containing the heightPercent.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getHeightPercentList() {
    return heightPercent_;
  }
  /**
   * <code>repeated float height_percent = 15;</code>
   * @return The count of heightPercent.
   */
  public int getHeightPercentCount() {
    return heightPercent_.size();
  }
  /**
   * <code>repeated float height_percent = 15;</code>
   * @param index The index of the element to return.
   * @return The heightPercent at the given index.
   */
  public float getHeightPercent(int index) {
    return heightPercent_.getFloat(index);
  }
  private int heightPercentMemoizedSerializedSize = -1;

  public static final int VERT_CTR_RATIO_FIELD_NUMBER = 16;
  private com.google.protobuf.Internal.FloatList vertCtrRatio_;
  /**
   * <code>repeated float vert_ctr_ratio = 16;</code>
   * @return A list containing the vertCtrRatio.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getVertCtrRatioList() {
    return vertCtrRatio_;
  }
  /**
   * <code>repeated float vert_ctr_ratio = 16;</code>
   * @return The count of vertCtrRatio.
   */
  public int getVertCtrRatioCount() {
    return vertCtrRatio_.size();
  }
  /**
   * <code>repeated float vert_ctr_ratio = 16;</code>
   * @param index The index of the element to return.
   * @return The vertCtrRatio at the given index.
   */
  public float getVertCtrRatio(int index) {
    return vertCtrRatio_.getFloat(index);
  }
  private int vertCtrRatioMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (!getNextCameraBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nextCamera_);
    }
    if (getInterpolationList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(interpolationMemoizedSerializedSize);
    }
    for (int i = 0; i < interpolation_.size(); i++) {
      output.writeEnumNoTag(interpolation_.get(i));
    }
    if (getTargetTypeList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(targetTypeMemoizedSerializedSize);
    }
    for (int i = 0; i < targetType_.size(); i++) {
      output.writeEnumNoTag(targetType_.get(i));
    }
    if (getEaseInSpeedList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(easeInSpeedMemoizedSerializedSize);
    }
    for (int i = 0; i < easeInSpeed_.size(); i++) {
      output.writeFloatNoTag(easeInSpeed_.getFloat(i));
    }
    if (getEaseOutSpeedList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(easeOutSpeedMemoizedSerializedSize);
    }
    for (int i = 0; i < easeOutSpeed_.size(); i++) {
      output.writeFloatNoTag(easeOutSpeed_.getFloat(i));
    }
    if (getDurationSList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(durationSMemoizedSerializedSize);
    }
    for (int i = 0; i < durationS_.size(); i++) {
      output.writeFloatNoTag(durationS_.getFloat(i));
    }
    if (getWaitSList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(waitSMemoizedSerializedSize);
    }
    for (int i = 0; i < waitS_.size(); i++) {
      output.writeFloatNoTag(waitS_.getFloat(i));
    }
    if (getTransitionSList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(transitionSMemoizedSerializedSize);
    }
    for (int i = 0; i < transitionS_.size(); i++) {
      output.writeFloatNoTag(transitionS_.getFloat(i));
    }
    if (getAngleDegList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(angleDegMemoizedSerializedSize);
    }
    for (int i = 0; i < angleDeg_.size(); i++) {
      output.writeFloatNoTag(angleDeg_.getFloat(i));
    }
    if (getAngleOffsetDegList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(angleOffsetDegMemoizedSerializedSize);
    }
    for (int i = 0; i < angleOffsetDeg_.size(); i++) {
      output.writeFloatNoTag(angleOffsetDeg_.getFloat(i));
    }
    if (getPitchDegList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(pitchDegMemoizedSerializedSize);
    }
    for (int i = 0; i < pitchDeg_.size(); i++) {
      output.writeFloatNoTag(pitchDeg_.getFloat(i));
    }
    if (getPitchOffsetDegList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(pitchOffsetDegMemoizedSerializedSize);
    }
    for (int i = 0; i < pitchOffsetDeg_.size(); i++) {
      output.writeFloatNoTag(pitchOffsetDeg_.getFloat(i));
    }
    if (getRollDegList().size() > 0) {
      output.writeUInt32NoTag(106);
      output.writeUInt32NoTag(rollDegMemoizedSerializedSize);
    }
    for (int i = 0; i < rollDeg_.size(); i++) {
      output.writeFloatNoTag(rollDeg_.getFloat(i));
    }
    if (getDistanceMList().size() > 0) {
      output.writeUInt32NoTag(114);
      output.writeUInt32NoTag(distanceMMemoizedSerializedSize);
    }
    for (int i = 0; i < distanceM_.size(); i++) {
      output.writeFloatNoTag(distanceM_.getFloat(i));
    }
    if (getHeightPercentList().size() > 0) {
      output.writeUInt32NoTag(122);
      output.writeUInt32NoTag(heightPercentMemoizedSerializedSize);
    }
    for (int i = 0; i < heightPercent_.size(); i++) {
      output.writeFloatNoTag(heightPercent_.getFloat(i));
    }
    if (getVertCtrRatioList().size() > 0) {
      output.writeUInt32NoTag(130);
      output.writeUInt32NoTag(vertCtrRatioMemoizedSerializedSize);
    }
    for (int i = 0; i < vertCtrRatio_.size(); i++) {
      output.writeFloatNoTag(vertCtrRatio_.getFloat(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNextCameraBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nextCamera_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < interpolation_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(interpolation_.get(i));
      }
      size += dataSize;
      if (!getInterpolationList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }interpolationMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < targetType_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(targetType_.get(i));
      }
      size += dataSize;
      if (!getTargetTypeList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }targetTypeMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getEaseInSpeedList().size();
      size += dataSize;
      if (!getEaseInSpeedList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      easeInSpeedMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getEaseOutSpeedList().size();
      size += dataSize;
      if (!getEaseOutSpeedList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      easeOutSpeedMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getDurationSList().size();
      size += dataSize;
      if (!getDurationSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      durationSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getWaitSList().size();
      size += dataSize;
      if (!getWaitSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      waitSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getTransitionSList().size();
      size += dataSize;
      if (!getTransitionSList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      transitionSMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getAngleDegList().size();
      size += dataSize;
      if (!getAngleDegList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      angleDegMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getAngleOffsetDegList().size();
      size += dataSize;
      if (!getAngleOffsetDegList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      angleOffsetDegMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getPitchDegList().size();
      size += dataSize;
      if (!getPitchDegList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      pitchDegMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getPitchOffsetDegList().size();
      size += dataSize;
      if (!getPitchOffsetDegList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      pitchOffsetDegMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getRollDegList().size();
      size += dataSize;
      if (!getRollDegList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      rollDegMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getDistanceMList().size();
      size += dataSize;
      if (!getDistanceMList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      distanceMMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getHeightPercentList().size();
      size += dataSize;
      if (!getHeightPercentList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      heightPercentMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getVertCtrRatioList().size();
      size += dataSize;
      if (!getVertCtrRatioList().isEmpty()) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      vertCtrRatioMemoizedSerializedSize = dataSize;
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof POGOProtos.Rpc.CameraSettingsProto)) {
      return super.equals(obj);
    }
    POGOProtos.Rpc.CameraSettingsProto other = (POGOProtos.Rpc.CameraSettingsProto) obj;

    if (!getNextCamera()
        .equals(other.getNextCamera())) return false;
    if (!interpolation_.equals(other.interpolation_)) return false;
    if (!targetType_.equals(other.targetType_)) return false;
    if (!getEaseInSpeedList()
        .equals(other.getEaseInSpeedList())) return false;
    if (!getEaseOutSpeedList()
        .equals(other.getEaseOutSpeedList())) return false;
    if (!getDurationSList()
        .equals(other.getDurationSList())) return false;
    if (!getWaitSList()
        .equals(other.getWaitSList())) return false;
    if (!getTransitionSList()
        .equals(other.getTransitionSList())) return false;
    if (!getAngleDegList()
        .equals(other.getAngleDegList())) return false;
    if (!getAngleOffsetDegList()
        .equals(other.getAngleOffsetDegList())) return false;
    if (!getPitchDegList()
        .equals(other.getPitchDegList())) return false;
    if (!getPitchOffsetDegList()
        .equals(other.getPitchOffsetDegList())) return false;
    if (!getRollDegList()
        .equals(other.getRollDegList())) return false;
    if (!getDistanceMList()
        .equals(other.getDistanceMList())) return false;
    if (!getHeightPercentList()
        .equals(other.getHeightPercentList())) return false;
    if (!getVertCtrRatioList()
        .equals(other.getVertCtrRatioList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NEXT_CAMERA_FIELD_NUMBER;
    hash = (53 * hash) + getNextCamera().hashCode();
    if (getInterpolationCount() > 0) {
      hash = (37 * hash) + INTERPOLATION_FIELD_NUMBER;
      hash = (53 * hash) + interpolation_.hashCode();
    }
    if (getTargetTypeCount() > 0) {
      hash = (37 * hash) + TARGET_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + targetType_.hashCode();
    }
    if (getEaseInSpeedCount() > 0) {
      hash = (37 * hash) + EASE_IN_SPEED_FIELD_NUMBER;
      hash = (53 * hash) + getEaseInSpeedList().hashCode();
    }
    if (getEaseOutSpeedCount() > 0) {
      hash = (37 * hash) + EASE_OUT_SPEED_FIELD_NUMBER;
      hash = (53 * hash) + getEaseOutSpeedList().hashCode();
    }
    if (getDurationSCount() > 0) {
      hash = (37 * hash) + DURATION_S_FIELD_NUMBER;
      hash = (53 * hash) + getDurationSList().hashCode();
    }
    if (getWaitSCount() > 0) {
      hash = (37 * hash) + WAIT_S_FIELD_NUMBER;
      hash = (53 * hash) + getWaitSList().hashCode();
    }
    if (getTransitionSCount() > 0) {
      hash = (37 * hash) + TRANSITION_S_FIELD_NUMBER;
      hash = (53 * hash) + getTransitionSList().hashCode();
    }
    if (getAngleDegCount() > 0) {
      hash = (37 * hash) + ANGLE_DEG_FIELD_NUMBER;
      hash = (53 * hash) + getAngleDegList().hashCode();
    }
    if (getAngleOffsetDegCount() > 0) {
      hash = (37 * hash) + ANGLE_OFFSET_DEG_FIELD_NUMBER;
      hash = (53 * hash) + getAngleOffsetDegList().hashCode();
    }
    if (getPitchDegCount() > 0) {
      hash = (37 * hash) + PITCH_DEG_FIELD_NUMBER;
      hash = (53 * hash) + getPitchDegList().hashCode();
    }
    if (getPitchOffsetDegCount() > 0) {
      hash = (37 * hash) + PITCH_OFFSET_DEG_FIELD_NUMBER;
      hash = (53 * hash) + getPitchOffsetDegList().hashCode();
    }
    if (getRollDegCount() > 0) {
      hash = (37 * hash) + ROLL_DEG_FIELD_NUMBER;
      hash = (53 * hash) + getRollDegList().hashCode();
    }
    if (getDistanceMCount() > 0) {
      hash = (37 * hash) + DISTANCE_M_FIELD_NUMBER;
      hash = (53 * hash) + getDistanceMList().hashCode();
    }
    if (getHeightPercentCount() > 0) {
      hash = (37 * hash) + HEIGHT_PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + getHeightPercentList().hashCode();
    }
    if (getVertCtrRatioCount() > 0) {
      hash = (37 * hash) + VERT_CTR_RATIO_FIELD_NUMBER;
      hash = (53 * hash) + getVertCtrRatioList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static POGOProtos.Rpc.CameraSettingsProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(POGOProtos.Rpc.CameraSettingsProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ref: NIMOCCNGHEN
   * </pre>
   *
   * Protobuf type {@code POGOProtos.Rpc.CameraSettingsProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:POGOProtos.Rpc.CameraSettingsProto)
      POGOProtos.Rpc.CameraSettingsProtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return POGOProtos.Rpc.POGOProtosRpc.internal_static_POGOProtos_Rpc_CameraSettingsProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return POGOProtos.Rpc.POGOProtosRpc.internal_static_POGOProtos_Rpc_CameraSettingsProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              POGOProtos.Rpc.CameraSettingsProto.class, POGOProtos.Rpc.CameraSettingsProto.Builder.class);
    }

    // Construct using POGOProtos.Rpc.CameraSettingsProto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      nextCamera_ = "";

      interpolation_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      targetType_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      easeInSpeed_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000004);
      easeOutSpeed_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000008);
      durationS_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000010);
      waitS_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000020);
      transitionS_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000040);
      angleDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000080);
      angleOffsetDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000100);
      pitchDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000200);
      pitchOffsetDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000400);
      rollDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000800);
      distanceM_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00001000);
      heightPercent_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00002000);
      vertCtrRatio_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00004000);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return POGOProtos.Rpc.POGOProtosRpc.internal_static_POGOProtos_Rpc_CameraSettingsProto_descriptor;
    }

    @java.lang.Override
    public POGOProtos.Rpc.CameraSettingsProto getDefaultInstanceForType() {
      return POGOProtos.Rpc.CameraSettingsProto.getDefaultInstance();
    }

    @java.lang.Override
    public POGOProtos.Rpc.CameraSettingsProto build() {
      POGOProtos.Rpc.CameraSettingsProto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public POGOProtos.Rpc.CameraSettingsProto buildPartial() {
      POGOProtos.Rpc.CameraSettingsProto result = new POGOProtos.Rpc.CameraSettingsProto(this);
      int from_bitField0_ = bitField0_;
      result.nextCamera_ = nextCamera_;
      if (((bitField0_ & 0x00000001) != 0)) {
        interpolation_ = java.util.Collections.unmodifiableList(interpolation_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.interpolation_ = interpolation_;
      if (((bitField0_ & 0x00000002) != 0)) {
        targetType_ = java.util.Collections.unmodifiableList(targetType_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.targetType_ = targetType_;
      if (((bitField0_ & 0x00000004) != 0)) {
        easeInSpeed_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.easeInSpeed_ = easeInSpeed_;
      if (((bitField0_ & 0x00000008) != 0)) {
        easeOutSpeed_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.easeOutSpeed_ = easeOutSpeed_;
      if (((bitField0_ & 0x00000010) != 0)) {
        durationS_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.durationS_ = durationS_;
      if (((bitField0_ & 0x00000020) != 0)) {
        waitS_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.waitS_ = waitS_;
      if (((bitField0_ & 0x00000040) != 0)) {
        transitionS_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.transitionS_ = transitionS_;
      if (((bitField0_ & 0x00000080) != 0)) {
        angleDeg_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.angleDeg_ = angleDeg_;
      if (((bitField0_ & 0x00000100) != 0)) {
        angleOffsetDeg_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.angleOffsetDeg_ = angleOffsetDeg_;
      if (((bitField0_ & 0x00000200) != 0)) {
        pitchDeg_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.pitchDeg_ = pitchDeg_;
      if (((bitField0_ & 0x00000400) != 0)) {
        pitchOffsetDeg_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000400);
      }
      result.pitchOffsetDeg_ = pitchOffsetDeg_;
      if (((bitField0_ & 0x00000800) != 0)) {
        rollDeg_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000800);
      }
      result.rollDeg_ = rollDeg_;
      if (((bitField0_ & 0x00001000) != 0)) {
        distanceM_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00001000);
      }
      result.distanceM_ = distanceM_;
      if (((bitField0_ & 0x00002000) != 0)) {
        heightPercent_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00002000);
      }
      result.heightPercent_ = heightPercent_;
      if (((bitField0_ & 0x00004000) != 0)) {
        vertCtrRatio_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00004000);
      }
      result.vertCtrRatio_ = vertCtrRatio_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof POGOProtos.Rpc.CameraSettingsProto) {
        return mergeFrom((POGOProtos.Rpc.CameraSettingsProto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(POGOProtos.Rpc.CameraSettingsProto other) {
      if (other == POGOProtos.Rpc.CameraSettingsProto.getDefaultInstance()) return this;
      if (!other.getNextCamera().isEmpty()) {
        nextCamera_ = other.nextCamera_;
        onChanged();
      }
      if (!other.interpolation_.isEmpty()) {
        if (interpolation_.isEmpty()) {
          interpolation_ = other.interpolation_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureInterpolationIsMutable();
          interpolation_.addAll(other.interpolation_);
        }
        onChanged();
      }
      if (!other.targetType_.isEmpty()) {
        if (targetType_.isEmpty()) {
          targetType_ = other.targetType_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureTargetTypeIsMutable();
          targetType_.addAll(other.targetType_);
        }
        onChanged();
      }
      if (!other.easeInSpeed_.isEmpty()) {
        if (easeInSpeed_.isEmpty()) {
          easeInSpeed_ = other.easeInSpeed_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureEaseInSpeedIsMutable();
          easeInSpeed_.addAll(other.easeInSpeed_);
        }
        onChanged();
      }
      if (!other.easeOutSpeed_.isEmpty()) {
        if (easeOutSpeed_.isEmpty()) {
          easeOutSpeed_ = other.easeOutSpeed_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureEaseOutSpeedIsMutable();
          easeOutSpeed_.addAll(other.easeOutSpeed_);
        }
        onChanged();
      }
      if (!other.durationS_.isEmpty()) {
        if (durationS_.isEmpty()) {
          durationS_ = other.durationS_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureDurationSIsMutable();
          durationS_.addAll(other.durationS_);
        }
        onChanged();
      }
      if (!other.waitS_.isEmpty()) {
        if (waitS_.isEmpty()) {
          waitS_ = other.waitS_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureWaitSIsMutable();
          waitS_.addAll(other.waitS_);
        }
        onChanged();
      }
      if (!other.transitionS_.isEmpty()) {
        if (transitionS_.isEmpty()) {
          transitionS_ = other.transitionS_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureTransitionSIsMutable();
          transitionS_.addAll(other.transitionS_);
        }
        onChanged();
      }
      if (!other.angleDeg_.isEmpty()) {
        if (angleDeg_.isEmpty()) {
          angleDeg_ = other.angleDeg_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureAngleDegIsMutable();
          angleDeg_.addAll(other.angleDeg_);
        }
        onChanged();
      }
      if (!other.angleOffsetDeg_.isEmpty()) {
        if (angleOffsetDeg_.isEmpty()) {
          angleOffsetDeg_ = other.angleOffsetDeg_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureAngleOffsetDegIsMutable();
          angleOffsetDeg_.addAll(other.angleOffsetDeg_);
        }
        onChanged();
      }
      if (!other.pitchDeg_.isEmpty()) {
        if (pitchDeg_.isEmpty()) {
          pitchDeg_ = other.pitchDeg_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensurePitchDegIsMutable();
          pitchDeg_.addAll(other.pitchDeg_);
        }
        onChanged();
      }
      if (!other.pitchOffsetDeg_.isEmpty()) {
        if (pitchOffsetDeg_.isEmpty()) {
          pitchOffsetDeg_ = other.pitchOffsetDeg_;
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          ensurePitchOffsetDegIsMutable();
          pitchOffsetDeg_.addAll(other.pitchOffsetDeg_);
        }
        onChanged();
      }
      if (!other.rollDeg_.isEmpty()) {
        if (rollDeg_.isEmpty()) {
          rollDeg_ = other.rollDeg_;
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          ensureRollDegIsMutable();
          rollDeg_.addAll(other.rollDeg_);
        }
        onChanged();
      }
      if (!other.distanceM_.isEmpty()) {
        if (distanceM_.isEmpty()) {
          distanceM_ = other.distanceM_;
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          ensureDistanceMIsMutable();
          distanceM_.addAll(other.distanceM_);
        }
        onChanged();
      }
      if (!other.heightPercent_.isEmpty()) {
        if (heightPercent_.isEmpty()) {
          heightPercent_ = other.heightPercent_;
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          ensureHeightPercentIsMutable();
          heightPercent_.addAll(other.heightPercent_);
        }
        onChanged();
      }
      if (!other.vertCtrRatio_.isEmpty()) {
        if (vertCtrRatio_.isEmpty()) {
          vertCtrRatio_ = other.vertCtrRatio_;
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          ensureVertCtrRatioIsMutable();
          vertCtrRatio_.addAll(other.vertCtrRatio_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      POGOProtos.Rpc.CameraSettingsProto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (POGOProtos.Rpc.CameraSettingsProto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object nextCamera_ = "";
    /**
     * <code>string next_camera = 1;</code>
     * @return The nextCamera.
     */
    public java.lang.String getNextCamera() {
      java.lang.Object ref = nextCamera_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nextCamera_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string next_camera = 1;</code>
     * @return The bytes for nextCamera.
     */
    public com.google.protobuf.ByteString
        getNextCameraBytes() {
      java.lang.Object ref = nextCamera_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nextCamera_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string next_camera = 1;</code>
     * @param value The nextCamera to set.
     * @return This builder for chaining.
     */
    public Builder setNextCamera(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nextCamera_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string next_camera = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNextCamera() {
      
      nextCamera_ = getDefaultInstance().getNextCamera();
      onChanged();
      return this;
    }
    /**
     * <code>string next_camera = 1;</code>
     * @param value The bytes for nextCamera to set.
     * @return This builder for chaining.
     */
    public Builder setNextCameraBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      nextCamera_ = value;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> interpolation_ =
      java.util.Collections.emptyList();
    private void ensureInterpolationIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        interpolation_ = new java.util.ArrayList<java.lang.Integer>(interpolation_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @return A list containing the interpolation.
     */
    public java.util.List<POGOProtos.Rpc.CameraInterpolation> getInterpolationList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, POGOProtos.Rpc.CameraInterpolation>(interpolation_, interpolation_converter_);
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @return The count of interpolation.
     */
    public int getInterpolationCount() {
      return interpolation_.size();
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param index The index of the element to return.
     * @return The interpolation at the given index.
     */
    public POGOProtos.Rpc.CameraInterpolation getInterpolation(int index) {
      return interpolation_converter_.convert(interpolation_.get(index));
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param index The index to set the value at.
     * @param value The interpolation to set.
     * @return This builder for chaining.
     */
    public Builder setInterpolation(
        int index, POGOProtos.Rpc.CameraInterpolation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureInterpolationIsMutable();
      interpolation_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param value The interpolation to add.
     * @return This builder for chaining.
     */
    public Builder addInterpolation(POGOProtos.Rpc.CameraInterpolation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureInterpolationIsMutable();
      interpolation_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param values The interpolation to add.
     * @return This builder for chaining.
     */
    public Builder addAllInterpolation(
        java.lang.Iterable<? extends POGOProtos.Rpc.CameraInterpolation> values) {
      ensureInterpolationIsMutable();
      for (POGOProtos.Rpc.CameraInterpolation value : values) {
        interpolation_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearInterpolation() {
      interpolation_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @return A list containing the enum numeric values on the wire for interpolation.
     */
    public java.util.List<java.lang.Integer>
    getInterpolationValueList() {
      return java.util.Collections.unmodifiableList(interpolation_);
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of interpolation at the given index.
     */
    public int getInterpolationValue(int index) {
      return interpolation_.get(index);
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of interpolation at the given index.
     * @return This builder for chaining.
     */
    public Builder setInterpolationValue(
        int index, int value) {
      ensureInterpolationIsMutable();
      interpolation_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param value The enum numeric value on the wire for interpolation to add.
     * @return This builder for chaining.
     */
    public Builder addInterpolationValue(int value) {
      ensureInterpolationIsMutable();
      interpolation_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraInterpolation interpolation = 2;</code>
     * @param values The enum numeric values on the wire for interpolation to add.
     * @return This builder for chaining.
     */
    public Builder addAllInterpolationValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureInterpolationIsMutable();
      for (int value : values) {
        interpolation_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> targetType_ =
      java.util.Collections.emptyList();
    private void ensureTargetTypeIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        targetType_ = new java.util.ArrayList<java.lang.Integer>(targetType_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @return A list containing the targetType.
     */
    public java.util.List<POGOProtos.Rpc.CameraTarget> getTargetTypeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, POGOProtos.Rpc.CameraTarget>(targetType_, targetType_converter_);
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @return The count of targetType.
     */
    public int getTargetTypeCount() {
      return targetType_.size();
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param index The index of the element to return.
     * @return The targetType at the given index.
     */
    public POGOProtos.Rpc.CameraTarget getTargetType(int index) {
      return targetType_converter_.convert(targetType_.get(index));
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param index The index to set the value at.
     * @param value The targetType to set.
     * @return This builder for chaining.
     */
    public Builder setTargetType(
        int index, POGOProtos.Rpc.CameraTarget value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTargetTypeIsMutable();
      targetType_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param value The targetType to add.
     * @return This builder for chaining.
     */
    public Builder addTargetType(POGOProtos.Rpc.CameraTarget value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTargetTypeIsMutable();
      targetType_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param values The targetType to add.
     * @return This builder for chaining.
     */
    public Builder addAllTargetType(
        java.lang.Iterable<? extends POGOProtos.Rpc.CameraTarget> values) {
      ensureTargetTypeIsMutable();
      for (POGOProtos.Rpc.CameraTarget value : values) {
        targetType_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearTargetType() {
      targetType_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @return A list containing the enum numeric values on the wire for targetType.
     */
    public java.util.List<java.lang.Integer>
    getTargetTypeValueList() {
      return java.util.Collections.unmodifiableList(targetType_);
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of targetType at the given index.
     */
    public int getTargetTypeValue(int index) {
      return targetType_.get(index);
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of targetType at the given index.
     * @return This builder for chaining.
     */
    public Builder setTargetTypeValue(
        int index, int value) {
      ensureTargetTypeIsMutable();
      targetType_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param value The enum numeric value on the wire for targetType to add.
     * @return This builder for chaining.
     */
    public Builder addTargetTypeValue(int value) {
      ensureTargetTypeIsMutable();
      targetType_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .POGOProtos.Rpc.CameraTarget target_type = 3;</code>
     * @param values The enum numeric values on the wire for targetType to add.
     * @return This builder for chaining.
     */
    public Builder addAllTargetTypeValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTargetTypeIsMutable();
      for (int value : values) {
        targetType_.add(value);
      }
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList easeInSpeed_ = emptyFloatList();
    private void ensureEaseInSpeedIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        easeInSpeed_ = mutableCopy(easeInSpeed_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @return A list containing the easeInSpeed.
     */
    public java.util.List<java.lang.Float>
        getEaseInSpeedList() {
      return ((bitField0_ & 0x00000004) != 0) ?
               java.util.Collections.unmodifiableList(easeInSpeed_) : easeInSpeed_;
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @return The count of easeInSpeed.
     */
    public int getEaseInSpeedCount() {
      return easeInSpeed_.size();
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @param index The index of the element to return.
     * @return The easeInSpeed at the given index.
     */
    public float getEaseInSpeed(int index) {
      return easeInSpeed_.getFloat(index);
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @param index The index to set the value at.
     * @param value The easeInSpeed to set.
     * @return This builder for chaining.
     */
    public Builder setEaseInSpeed(
        int index, float value) {
      ensureEaseInSpeedIsMutable();
      easeInSpeed_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @param value The easeInSpeed to add.
     * @return This builder for chaining.
     */
    public Builder addEaseInSpeed(float value) {
      ensureEaseInSpeedIsMutable();
      easeInSpeed_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @param values The easeInSpeed to add.
     * @return This builder for chaining.
     */
    public Builder addAllEaseInSpeed(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureEaseInSpeedIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, easeInSpeed_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float ease_in_speed = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEaseInSpeed() {
      easeInSpeed_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList easeOutSpeed_ = emptyFloatList();
    private void ensureEaseOutSpeedIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        easeOutSpeed_ = mutableCopy(easeOutSpeed_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @return A list containing the easeOutSpeed.
     */
    public java.util.List<java.lang.Float>
        getEaseOutSpeedList() {
      return ((bitField0_ & 0x00000008) != 0) ?
               java.util.Collections.unmodifiableList(easeOutSpeed_) : easeOutSpeed_;
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @return The count of easeOutSpeed.
     */
    public int getEaseOutSpeedCount() {
      return easeOutSpeed_.size();
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @param index The index of the element to return.
     * @return The easeOutSpeed at the given index.
     */
    public float getEaseOutSpeed(int index) {
      return easeOutSpeed_.getFloat(index);
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @param index The index to set the value at.
     * @param value The easeOutSpeed to set.
     * @return This builder for chaining.
     */
    public Builder setEaseOutSpeed(
        int index, float value) {
      ensureEaseOutSpeedIsMutable();
      easeOutSpeed_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @param value The easeOutSpeed to add.
     * @return This builder for chaining.
     */
    public Builder addEaseOutSpeed(float value) {
      ensureEaseOutSpeedIsMutable();
      easeOutSpeed_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @param values The easeOutSpeed to add.
     * @return This builder for chaining.
     */
    public Builder addAllEaseOutSpeed(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureEaseOutSpeedIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, easeOutSpeed_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float ease_out_speed = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearEaseOutSpeed() {
      easeOutSpeed_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList durationS_ = emptyFloatList();
    private void ensureDurationSIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        durationS_ = mutableCopy(durationS_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @return A list containing the durationS.
     */
    public java.util.List<java.lang.Float>
        getDurationSList() {
      return ((bitField0_ & 0x00000010) != 0) ?
               java.util.Collections.unmodifiableList(durationS_) : durationS_;
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @return The count of durationS.
     */
    public int getDurationSCount() {
      return durationS_.size();
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @param index The index of the element to return.
     * @return The durationS at the given index.
     */
    public float getDurationS(int index) {
      return durationS_.getFloat(index);
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @param index The index to set the value at.
     * @param value The durationS to set.
     * @return This builder for chaining.
     */
    public Builder setDurationS(
        int index, float value) {
      ensureDurationSIsMutable();
      durationS_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @param value The durationS to add.
     * @return This builder for chaining.
     */
    public Builder addDurationS(float value) {
      ensureDurationSIsMutable();
      durationS_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @param values The durationS to add.
     * @return This builder for chaining.
     */
    public Builder addAllDurationS(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureDurationSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, durationS_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float duration_s = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearDurationS() {
      durationS_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList waitS_ = emptyFloatList();
    private void ensureWaitSIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        waitS_ = mutableCopy(waitS_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @return A list containing the waitS.
     */
    public java.util.List<java.lang.Float>
        getWaitSList() {
      return ((bitField0_ & 0x00000020) != 0) ?
               java.util.Collections.unmodifiableList(waitS_) : waitS_;
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @return The count of waitS.
     */
    public int getWaitSCount() {
      return waitS_.size();
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @param index The index of the element to return.
     * @return The waitS at the given index.
     */
    public float getWaitS(int index) {
      return waitS_.getFloat(index);
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @param index The index to set the value at.
     * @param value The waitS to set.
     * @return This builder for chaining.
     */
    public Builder setWaitS(
        int index, float value) {
      ensureWaitSIsMutable();
      waitS_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @param value The waitS to add.
     * @return This builder for chaining.
     */
    public Builder addWaitS(float value) {
      ensureWaitSIsMutable();
      waitS_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @param values The waitS to add.
     * @return This builder for chaining.
     */
    public Builder addAllWaitS(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureWaitSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, waitS_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float wait_s = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearWaitS() {
      waitS_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList transitionS_ = emptyFloatList();
    private void ensureTransitionSIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        transitionS_ = mutableCopy(transitionS_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @return A list containing the transitionS.
     */
    public java.util.List<java.lang.Float>
        getTransitionSList() {
      return ((bitField0_ & 0x00000040) != 0) ?
               java.util.Collections.unmodifiableList(transitionS_) : transitionS_;
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @return The count of transitionS.
     */
    public int getTransitionSCount() {
      return transitionS_.size();
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @param index The index of the element to return.
     * @return The transitionS at the given index.
     */
    public float getTransitionS(int index) {
      return transitionS_.getFloat(index);
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @param index The index to set the value at.
     * @param value The transitionS to set.
     * @return This builder for chaining.
     */
    public Builder setTransitionS(
        int index, float value) {
      ensureTransitionSIsMutable();
      transitionS_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @param value The transitionS to add.
     * @return This builder for chaining.
     */
    public Builder addTransitionS(float value) {
      ensureTransitionSIsMutable();
      transitionS_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @param values The transitionS to add.
     * @return This builder for chaining.
     */
    public Builder addAllTransitionS(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureTransitionSIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, transitionS_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float transition_s = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearTransitionS() {
      transitionS_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList angleDeg_ = emptyFloatList();
    private void ensureAngleDegIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        angleDeg_ = mutableCopy(angleDeg_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @return A list containing the angleDeg.
     */
    public java.util.List<java.lang.Float>
        getAngleDegList() {
      return ((bitField0_ & 0x00000080) != 0) ?
               java.util.Collections.unmodifiableList(angleDeg_) : angleDeg_;
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @return The count of angleDeg.
     */
    public int getAngleDegCount() {
      return angleDeg_.size();
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @param index The index of the element to return.
     * @return The angleDeg at the given index.
     */
    public float getAngleDeg(int index) {
      return angleDeg_.getFloat(index);
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @param index The index to set the value at.
     * @param value The angleDeg to set.
     * @return This builder for chaining.
     */
    public Builder setAngleDeg(
        int index, float value) {
      ensureAngleDegIsMutable();
      angleDeg_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @param value The angleDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAngleDeg(float value) {
      ensureAngleDegIsMutable();
      angleDeg_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @param values The angleDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAllAngleDeg(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureAngleDegIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, angleDeg_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float angle_deg = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearAngleDeg() {
      angleDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList angleOffsetDeg_ = emptyFloatList();
    private void ensureAngleOffsetDegIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        angleOffsetDeg_ = mutableCopy(angleOffsetDeg_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @return A list containing the angleOffsetDeg.
     */
    public java.util.List<java.lang.Float>
        getAngleOffsetDegList() {
      return ((bitField0_ & 0x00000100) != 0) ?
               java.util.Collections.unmodifiableList(angleOffsetDeg_) : angleOffsetDeg_;
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @return The count of angleOffsetDeg.
     */
    public int getAngleOffsetDegCount() {
      return angleOffsetDeg_.size();
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @param index The index of the element to return.
     * @return The angleOffsetDeg at the given index.
     */
    public float getAngleOffsetDeg(int index) {
      return angleOffsetDeg_.getFloat(index);
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @param index The index to set the value at.
     * @param value The angleOffsetDeg to set.
     * @return This builder for chaining.
     */
    public Builder setAngleOffsetDeg(
        int index, float value) {
      ensureAngleOffsetDegIsMutable();
      angleOffsetDeg_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @param value The angleOffsetDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAngleOffsetDeg(float value) {
      ensureAngleOffsetDegIsMutable();
      angleOffsetDeg_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @param values The angleOffsetDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAllAngleOffsetDeg(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureAngleOffsetDegIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, angleOffsetDeg_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float angle_offset_deg = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearAngleOffsetDeg() {
      angleOffsetDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList pitchDeg_ = emptyFloatList();
    private void ensurePitchDegIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        pitchDeg_ = mutableCopy(pitchDeg_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @return A list containing the pitchDeg.
     */
    public java.util.List<java.lang.Float>
        getPitchDegList() {
      return ((bitField0_ & 0x00000200) != 0) ?
               java.util.Collections.unmodifiableList(pitchDeg_) : pitchDeg_;
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @return The count of pitchDeg.
     */
    public int getPitchDegCount() {
      return pitchDeg_.size();
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @param index The index of the element to return.
     * @return The pitchDeg at the given index.
     */
    public float getPitchDeg(int index) {
      return pitchDeg_.getFloat(index);
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @param index The index to set the value at.
     * @param value The pitchDeg to set.
     * @return This builder for chaining.
     */
    public Builder setPitchDeg(
        int index, float value) {
      ensurePitchDegIsMutable();
      pitchDeg_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @param value The pitchDeg to add.
     * @return This builder for chaining.
     */
    public Builder addPitchDeg(float value) {
      ensurePitchDegIsMutable();
      pitchDeg_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @param values The pitchDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAllPitchDeg(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensurePitchDegIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, pitchDeg_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float pitch_deg = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearPitchDeg() {
      pitchDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList pitchOffsetDeg_ = emptyFloatList();
    private void ensurePitchOffsetDegIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        pitchOffsetDeg_ = mutableCopy(pitchOffsetDeg_);
        bitField0_ |= 0x00000400;
       }
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @return A list containing the pitchOffsetDeg.
     */
    public java.util.List<java.lang.Float>
        getPitchOffsetDegList() {
      return ((bitField0_ & 0x00000400) != 0) ?
               java.util.Collections.unmodifiableList(pitchOffsetDeg_) : pitchOffsetDeg_;
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @return The count of pitchOffsetDeg.
     */
    public int getPitchOffsetDegCount() {
      return pitchOffsetDeg_.size();
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @param index The index of the element to return.
     * @return The pitchOffsetDeg at the given index.
     */
    public float getPitchOffsetDeg(int index) {
      return pitchOffsetDeg_.getFloat(index);
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @param index The index to set the value at.
     * @param value The pitchOffsetDeg to set.
     * @return This builder for chaining.
     */
    public Builder setPitchOffsetDeg(
        int index, float value) {
      ensurePitchOffsetDegIsMutable();
      pitchOffsetDeg_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @param value The pitchOffsetDeg to add.
     * @return This builder for chaining.
     */
    public Builder addPitchOffsetDeg(float value) {
      ensurePitchOffsetDegIsMutable();
      pitchOffsetDeg_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @param values The pitchOffsetDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAllPitchOffsetDeg(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensurePitchOffsetDegIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, pitchOffsetDeg_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float pitch_offset_deg = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearPitchOffsetDeg() {
      pitchOffsetDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList rollDeg_ = emptyFloatList();
    private void ensureRollDegIsMutable() {
      if (!((bitField0_ & 0x00000800) != 0)) {
        rollDeg_ = mutableCopy(rollDeg_);
        bitField0_ |= 0x00000800;
       }
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @return A list containing the rollDeg.
     */
    public java.util.List<java.lang.Float>
        getRollDegList() {
      return ((bitField0_ & 0x00000800) != 0) ?
               java.util.Collections.unmodifiableList(rollDeg_) : rollDeg_;
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @return The count of rollDeg.
     */
    public int getRollDegCount() {
      return rollDeg_.size();
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @param index The index of the element to return.
     * @return The rollDeg at the given index.
     */
    public float getRollDeg(int index) {
      return rollDeg_.getFloat(index);
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @param index The index to set the value at.
     * @param value The rollDeg to set.
     * @return This builder for chaining.
     */
    public Builder setRollDeg(
        int index, float value) {
      ensureRollDegIsMutable();
      rollDeg_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @param value The rollDeg to add.
     * @return This builder for chaining.
     */
    public Builder addRollDeg(float value) {
      ensureRollDegIsMutable();
      rollDeg_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @param values The rollDeg to add.
     * @return This builder for chaining.
     */
    public Builder addAllRollDeg(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureRollDegIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, rollDeg_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float roll_deg = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearRollDeg() {
      rollDeg_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList distanceM_ = emptyFloatList();
    private void ensureDistanceMIsMutable() {
      if (!((bitField0_ & 0x00001000) != 0)) {
        distanceM_ = mutableCopy(distanceM_);
        bitField0_ |= 0x00001000;
       }
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @return A list containing the distanceM.
     */
    public java.util.List<java.lang.Float>
        getDistanceMList() {
      return ((bitField0_ & 0x00001000) != 0) ?
               java.util.Collections.unmodifiableList(distanceM_) : distanceM_;
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @return The count of distanceM.
     */
    public int getDistanceMCount() {
      return distanceM_.size();
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @param index The index of the element to return.
     * @return The distanceM at the given index.
     */
    public float getDistanceM(int index) {
      return distanceM_.getFloat(index);
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @param index The index to set the value at.
     * @param value The distanceM to set.
     * @return This builder for chaining.
     */
    public Builder setDistanceM(
        int index, float value) {
      ensureDistanceMIsMutable();
      distanceM_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @param value The distanceM to add.
     * @return This builder for chaining.
     */
    public Builder addDistanceM(float value) {
      ensureDistanceMIsMutable();
      distanceM_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @param values The distanceM to add.
     * @return This builder for chaining.
     */
    public Builder addAllDistanceM(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureDistanceMIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, distanceM_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float distance_m = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearDistanceM() {
      distanceM_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00001000);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList heightPercent_ = emptyFloatList();
    private void ensureHeightPercentIsMutable() {
      if (!((bitField0_ & 0x00002000) != 0)) {
        heightPercent_ = mutableCopy(heightPercent_);
        bitField0_ |= 0x00002000;
       }
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @return A list containing the heightPercent.
     */
    public java.util.List<java.lang.Float>
        getHeightPercentList() {
      return ((bitField0_ & 0x00002000) != 0) ?
               java.util.Collections.unmodifiableList(heightPercent_) : heightPercent_;
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @return The count of heightPercent.
     */
    public int getHeightPercentCount() {
      return heightPercent_.size();
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @param index The index of the element to return.
     * @return The heightPercent at the given index.
     */
    public float getHeightPercent(int index) {
      return heightPercent_.getFloat(index);
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @param index The index to set the value at.
     * @param value The heightPercent to set.
     * @return This builder for chaining.
     */
    public Builder setHeightPercent(
        int index, float value) {
      ensureHeightPercentIsMutable();
      heightPercent_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @param value The heightPercent to add.
     * @return This builder for chaining.
     */
    public Builder addHeightPercent(float value) {
      ensureHeightPercentIsMutable();
      heightPercent_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @param values The heightPercent to add.
     * @return This builder for chaining.
     */
    public Builder addAllHeightPercent(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureHeightPercentIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, heightPercent_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float height_percent = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearHeightPercent() {
      heightPercent_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00002000);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList vertCtrRatio_ = emptyFloatList();
    private void ensureVertCtrRatioIsMutable() {
      if (!((bitField0_ & 0x00004000) != 0)) {
        vertCtrRatio_ = mutableCopy(vertCtrRatio_);
        bitField0_ |= 0x00004000;
       }
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @return A list containing the vertCtrRatio.
     */
    public java.util.List<java.lang.Float>
        getVertCtrRatioList() {
      return ((bitField0_ & 0x00004000) != 0) ?
               java.util.Collections.unmodifiableList(vertCtrRatio_) : vertCtrRatio_;
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @return The count of vertCtrRatio.
     */
    public int getVertCtrRatioCount() {
      return vertCtrRatio_.size();
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @param index The index of the element to return.
     * @return The vertCtrRatio at the given index.
     */
    public float getVertCtrRatio(int index) {
      return vertCtrRatio_.getFloat(index);
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @param index The index to set the value at.
     * @param value The vertCtrRatio to set.
     * @return This builder for chaining.
     */
    public Builder setVertCtrRatio(
        int index, float value) {
      ensureVertCtrRatioIsMutable();
      vertCtrRatio_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @param value The vertCtrRatio to add.
     * @return This builder for chaining.
     */
    public Builder addVertCtrRatio(float value) {
      ensureVertCtrRatioIsMutable();
      vertCtrRatio_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @param values The vertCtrRatio to add.
     * @return This builder for chaining.
     */
    public Builder addAllVertCtrRatio(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureVertCtrRatioIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, vertCtrRatio_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float vert_ctr_ratio = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearVertCtrRatio() {
      vertCtrRatio_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00004000);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:POGOProtos.Rpc.CameraSettingsProto)
  }

  // @@protoc_insertion_point(class_scope:POGOProtos.Rpc.CameraSettingsProto)
  private static final POGOProtos.Rpc.CameraSettingsProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new POGOProtos.Rpc.CameraSettingsProto();
  }

  public static POGOProtos.Rpc.CameraSettingsProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CameraSettingsProto>
      PARSER = new com.google.protobuf.AbstractParser<CameraSettingsProto>() {
    @java.lang.Override
    public CameraSettingsProto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CameraSettingsProto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CameraSettingsProto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CameraSettingsProto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public POGOProtos.Rpc.CameraSettingsProto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

