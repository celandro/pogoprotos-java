// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Rpc.proto

package POGOProtos.Rpc;

public interface CaptureProbabilityProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:POGOProtos.Rpc.CaptureProbabilityProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated .POGOProtos.Rpc.Item pokeball_type = 1;</code>
   * @return A list containing the pokeballType.
   */
  java.util.List<POGOProtos.Rpc.Item> getPokeballTypeList();
  /**
   * <code>repeated .POGOProtos.Rpc.Item pokeball_type = 1;</code>
   * @return The count of pokeballType.
   */
  int getPokeballTypeCount();
  /**
   * <code>repeated .POGOProtos.Rpc.Item pokeball_type = 1;</code>
   * @param index The index of the element to return.
   * @return The pokeballType at the given index.
   */
  POGOProtos.Rpc.Item getPokeballType(int index);
  /**
   * <code>repeated .POGOProtos.Rpc.Item pokeball_type = 1;</code>
   * @return A list containing the enum numeric values on the wire for pokeballType.
   */
  java.util.List<java.lang.Integer>
  getPokeballTypeValueList();
  /**
   * <code>repeated .POGOProtos.Rpc.Item pokeball_type = 1;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of pokeballType at the given index.
   */
  int getPokeballTypeValue(int index);

  /**
   * <code>repeated float capture_probability = 2;</code>
   * @return A list containing the captureProbability.
   */
  java.util.List<java.lang.Float> getCaptureProbabilityList();
  /**
   * <code>repeated float capture_probability = 2;</code>
   * @return The count of captureProbability.
   */
  int getCaptureProbabilityCount();
  /**
   * <code>repeated float capture_probability = 2;</code>
   * @param index The index of the element to return.
   * @return The captureProbability at the given index.
   */
  float getCaptureProbability(int index);

  /**
   * <code>double reticle_difficulty_scale = 12;</code>
   * @return The reticleDifficultyScale.
   */
  double getReticleDifficultyScale();
}
